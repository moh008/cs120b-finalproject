
moh_tkim_lab8_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000859  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b8  00000000  00000000  00000a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  00001241  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f8  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	08 d0       	rcall	.+16     	; 0xaa <main>
  9a:	52 c0       	rjmp	.+164    	; 0x140 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ADC_init>:
 */

#include <avr/io.h>

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 6e       	ori	r24, 0xE0	; 224
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

000000aa <main>:
	//        the previous conversion completes.
}

int main(void)
{
    DDRC = 0xFF; PORTC = 0x00;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	18 b8       	out	0x08, r1	; 8
	unsigned const long MAX = 0x0061;// my home has value at 0x0061 with 10k ohm resistor
	ADC_init();
  b0:	f6 df       	rcall	.-20     	; 0x9e <ADC_init>
	
    while (1) 
    {
		if(ADC >= MAX)
  b2:	e8 e7       	ldi	r30, 0x78	; 120
  b4:	f0 e0       	ldi	r31, 0x00	; 0
		{
			PORTC = 0x03;
		}
		else if((ADC < (MAX/4)) && (ADC >= 3*MAX/16))
		{
			PORTC = 0x01;
  b6:	b1 e0       	ldi	r27, 0x01	; 1
		{
			PORTC = 0x07;
		}
		else if(ADC >= 2*(MAX)/8)
		{
			PORTC = 0x03;
  b8:	a3 e0       	ldi	r26, 0x03	; 3
		{
			PORTC = 0x0F;
		}
		else if(ADC >= 3*(MAX)/8)
		{
			PORTC = 0x07;
  ba:	77 e0       	ldi	r23, 0x07	; 7
		{
			PORTC = 0x1F;
		}
		else if(ADC >= 4*(MAX)/8)
		{
			PORTC = 0x0F;
  bc:	6f e0       	ldi	r22, 0x0F	; 15
		{
			PORTC = 0x3F;
		}
		else if(ADC >= 5*(MAX)/8)
		{
			PORTC = 0x1F;
  be:	5f e1       	ldi	r21, 0x1F	; 31
		{
			PORTC = 0x7F;
		}
		else if(ADC >=  6*(MAX)/8)
		{
			PORTC = 0x3F;
  c0:	4f e3       	ldi	r20, 0x3F	; 63
		{
			PORTC = 0xFF;
		}
		else if(ADC >= 7*(MAX)/8)
		{
			PORTC = 0x7F;
  c2:	3f e7       	ldi	r19, 0x7F	; 127
	
    while (1) 
    {
		if(ADC >= MAX)
		{
			PORTC = 0xFF;
  c4:	2f ef       	ldi	r18, 0xFF	; 255
	unsigned const long MAX = 0x0061;// my home has value at 0x0061 with 10k ohm resistor
	ADC_init();
	
    while (1) 
    {
		if(ADC >= MAX)
  c6:	80 81       	ld	r24, Z
  c8:	91 81       	ldd	r25, Z+1	; 0x01
  ca:	81 36       	cpi	r24, 0x61	; 97
  cc:	91 05       	cpc	r25, r1
  ce:	10 f0       	brcs	.+4      	; 0xd4 <main+0x2a>
		{
			PORTC = 0xFF;
  d0:	28 b9       	out	0x08, r18	; 8
  d2:	f9 cf       	rjmp	.-14     	; 0xc6 <main+0x1c>
		}
		else if(ADC >= 7*(MAX)/8)
  d4:	80 81       	ld	r24, Z
  d6:	91 81       	ldd	r25, Z+1	; 0x01
  d8:	84 35       	cpi	r24, 0x54	; 84
  da:	91 05       	cpc	r25, r1
  dc:	10 f0       	brcs	.+4      	; 0xe2 <main+0x38>
		{
			PORTC = 0x7F;
  de:	38 b9       	out	0x08, r19	; 8
  e0:	f2 cf       	rjmp	.-28     	; 0xc6 <main+0x1c>
		}
		else if(ADC >=  6*(MAX)/8)
  e2:	80 81       	ld	r24, Z
  e4:	91 81       	ldd	r25, Z+1	; 0x01
  e6:	88 34       	cpi	r24, 0x48	; 72
  e8:	91 05       	cpc	r25, r1
  ea:	10 f0       	brcs	.+4      	; 0xf0 <main+0x46>
		{
			PORTC = 0x3F;
  ec:	48 b9       	out	0x08, r20	; 8
  ee:	eb cf       	rjmp	.-42     	; 0xc6 <main+0x1c>
		}
		else if(ADC >= 5*(MAX)/8)
  f0:	80 81       	ld	r24, Z
  f2:	91 81       	ldd	r25, Z+1	; 0x01
  f4:	cc 97       	sbiw	r24, 0x3c	; 60
  f6:	10 f0       	brcs	.+4      	; 0xfc <main+0x52>
		{
			PORTC = 0x1F;
  f8:	58 b9       	out	0x08, r21	; 8
  fa:	e5 cf       	rjmp	.-54     	; 0xc6 <main+0x1c>
		}
		else if(ADC >= 4*(MAX)/8)
  fc:	80 81       	ld	r24, Z
  fe:	91 81       	ldd	r25, Z+1	; 0x01
 100:	c0 97       	sbiw	r24, 0x30	; 48
 102:	10 f0       	brcs	.+4      	; 0x108 <main+0x5e>
		{
			PORTC = 0x0F;
 104:	68 b9       	out	0x08, r22	; 8
 106:	df cf       	rjmp	.-66     	; 0xc6 <main+0x1c>
		}
		else if(ADC >= 3*(MAX)/8)
 108:	80 81       	ld	r24, Z
 10a:	91 81       	ldd	r25, Z+1	; 0x01
 10c:	84 97       	sbiw	r24, 0x24	; 36
 10e:	10 f0       	brcs	.+4      	; 0x114 <main+0x6a>
		{
			PORTC = 0x07;
 110:	78 b9       	out	0x08, r23	; 8
 112:	d9 cf       	rjmp	.-78     	; 0xc6 <main+0x1c>
		}
		else if(ADC >= 2*(MAX)/8)
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	48 97       	sbiw	r24, 0x18	; 24
 11a:	10 f0       	brcs	.+4      	; 0x120 <main+0x76>
		{
			PORTC = 0x03;
 11c:	a8 b9       	out	0x08, r26	; 8
 11e:	d3 cf       	rjmp	.-90     	; 0xc6 <main+0x1c>
		}
		else if((ADC < (MAX/4)) && (ADC >= 3*MAX/16))
 120:	80 81       	ld	r24, Z
 122:	91 81       	ldd	r25, Z+1	; 0x01
 124:	48 97       	sbiw	r24, 0x18	; 24
 126:	30 f4       	brcc	.+12     	; 0x134 <main+0x8a>
 128:	80 81       	ld	r24, Z
 12a:	91 81       	ldd	r25, Z+1	; 0x01
 12c:	42 97       	sbiw	r24, 0x12	; 18
 12e:	10 f0       	brcs	.+4      	; 0x134 <main+0x8a>
		{
			PORTC = 0x01;
 130:	b8 b9       	out	0x08, r27	; 8
 132:	c9 cf       	rjmp	.-110    	; 0xc6 <main+0x1c>
		}
		else if(ADC <= (3*MAX/16))
 134:	80 81       	ld	r24, Z
 136:	91 81       	ldd	r25, Z+1	; 0x01
 138:	43 97       	sbiw	r24, 0x13	; 19
 13a:	28 f6       	brcc	.-118    	; 0xc6 <main+0x1c>
		{
			PORTC = 0x00;
 13c:	18 b8       	out	0x08, r1	; 8
 13e:	c3 cf       	rjmp	.-122    	; 0xc6 <main+0x1c>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>


moh_matrixlab_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000574  00000608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000574  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800118  00800118  00000620  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ddb  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b0  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a1  00000000  00000000  00001e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  0000242c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000623  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055d  00000000  00000000  00002b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	0b c1       	rjmp	.+534    	; 0x24c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e7       	ldi	r30, 0x74	; 116
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	52 d1       	rcall	.+676    	; 0x368 <main>
  c4:	55 c2       	rjmp	.+1194   	; 0x570 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <p1_move>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	20 b1       	in	r18, 0x00	; 0
  ca:	20 95       	com	r18
  cc:	23 70       	andi	r18, 0x03	; 3
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	91 05       	cpc	r25, r1
  d2:	51 f0       	breq	.+20     	; 0xe8 <p1_move+0x20>
  d4:	1c f4       	brge	.+6      	; 0xdc <p1_move+0x14>
  d6:	89 2b       	or	r24, r25
  d8:	e9 f1       	breq	.+122    	; 0x154 <p1_move+0x8c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <p1_move+0x3e>
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	91 05       	cpc	r25, r1
  e0:	41 f0       	breq	.+16     	; 0xf2 <p1_move+0x2a>
  e2:	03 97       	sbiw	r24, 0x03	; 3
  e4:	59 f0       	breq	.+22     	; 0xfc <p1_move+0x34>
  e6:	0f c0       	rjmp	.+30     	; 0x106 <p1_move+0x3e>
  e8:	21 30       	cpi	r18, 0x01	; 1
  ea:	b1 f0       	breq	.+44     	; 0x118 <p1_move+0x50>
  ec:	22 30       	cpi	r18, 0x02	; 2
  ee:	d1 f5       	brne	.+116    	; 0x164 <p1_move+0x9c>
  f0:	22 c0       	rjmp	.+68     	; 0x136 <p1_move+0x6e>
  f2:	21 30       	cpi	r18, 0x01	; 1
  f4:	89 f0       	breq	.+34     	; 0x118 <p1_move+0x50>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret
  fc:	22 30       	cpi	r18, 0x02	; 2
  fe:	d9 f0       	breq	.+54     	; 0x136 <p1_move+0x6e>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	08 95       	ret
 106:	8f e7       	ldi	r24, 0x7F	; 127
 108:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <p1_sel>
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <p1_index>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	08 95       	ret
 118:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <p1_index>
 11c:	e8 2f       	mov	r30, r24
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	e8 5f       	subi	r30, 0xF8	; 248
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	90 81       	ld	r25, Z
 126:	90 3e       	cpi	r25, 0xE0	; 224
 128:	c1 f0       	breq	.+48     	; 0x15a <p1_move+0x92>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <p1_index>
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	08 95       	ret
 136:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <p1_index>
 13a:	e8 2f       	mov	r30, r24
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	e8 5f       	subi	r30, 0xF8	; 248
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	90 81       	ld	r25, Z
 144:	97 30       	cpi	r25, 0x07	; 7
 146:	61 f0       	breq	.+24     	; 0x160 <p1_move+0x98>
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <p1_index>
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	08 95       	ret
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret

00000166 <p2_move>:
 166:	20 b1       	in	r18, 0x00	; 0
 168:	20 95       	com	r18
 16a:	2c 70       	andi	r18, 0x0C	; 12
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	91 05       	cpc	r25, r1
 170:	51 f0       	breq	.+20     	; 0x186 <p2_move+0x20>
 172:	1c f4       	brge	.+6      	; 0x17a <p2_move+0x14>
 174:	89 2b       	or	r24, r25
 176:	e9 f1       	breq	.+122    	; 0x1f2 <p2_move+0x8c>
 178:	15 c0       	rjmp	.+42     	; 0x1a4 <p2_move+0x3e>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	91 05       	cpc	r25, r1
 17e:	41 f0       	breq	.+16     	; 0x190 <p2_move+0x2a>
 180:	03 97       	sbiw	r24, 0x03	; 3
 182:	59 f0       	breq	.+22     	; 0x19a <p2_move+0x34>
 184:	0f c0       	rjmp	.+30     	; 0x1a4 <p2_move+0x3e>
 186:	24 30       	cpi	r18, 0x04	; 4
 188:	b1 f0       	breq	.+44     	; 0x1b6 <p2_move+0x50>
 18a:	28 30       	cpi	r18, 0x08	; 8
 18c:	d1 f5       	brne	.+116    	; 0x202 <p2_move+0x9c>
 18e:	22 c0       	rjmp	.+68     	; 0x1d4 <p2_move+0x6e>
 190:	24 30       	cpi	r18, 0x04	; 4
 192:	89 f0       	breq	.+34     	; 0x1b6 <p2_move+0x50>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret
 19a:	28 30       	cpi	r18, 0x08	; 8
 19c:	d9 f0       	breq	.+54     	; 0x1d4 <p2_move+0x6e>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	08 95       	ret
 1a4:	8e ef       	ldi	r24, 0xFE	; 254
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <p2_index>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret
 1b6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <p2_index>
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ef 5f       	subi	r30, 0xFF	; 255
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	90 81       	ld	r25, Z
 1c4:	90 3e       	cpi	r25, 0xE0	; 224
 1c6:	c1 f0       	breq	.+48     	; 0x1f8 <p2_move+0x92>
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <p2_index>
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 95       	ret
 1d4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <p2_index>
 1d8:	e8 2f       	mov	r30, r24
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ef 5f       	subi	r30, 0xFF	; 255
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	90 81       	ld	r25, Z
 1e2:	97 30       	cpi	r25, 0x07	; 7
 1e4:	61 f0       	breq	.+24     	; 0x1fe <p2_move+0x98>
 1e6:	81 50       	subi	r24, 0x01	; 1
 1e8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <p2_index>
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	08 95       	ret
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	08 95       	ret
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	08 95       	ret

00000204 <TimerOn>:
 204:	8b e0       	ldi	r24, 0x0B	; 11
 206:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 20a:	8d e7       	ldi	r24, 0x7D	; 125
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 212:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 21c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 220:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 224:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_avr_timer_M>
 228:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_avr_timer_M+0x1>
 22c:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <_avr_timer_M+0x2>
 230:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <_avr_timer_M+0x3>
 234:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <_avr_timer_cntcurr>
 238:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <_avr_timer_cntcurr+0x1>
 23c:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <_avr_timer_cntcurr+0x2>
 240:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <_avr_timer_cntcurr+0x3>
 244:	8f b7       	in	r24, 0x3f	; 63
 246:	80 68       	ori	r24, 0x80	; 128
 248:	8f bf       	out	0x3f, r24	; 63
 24a:	08 95       	ret

0000024c <__vector_13>:
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <_avr_timer_cntcurr>
 262:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <_avr_timer_cntcurr+0x1>
 266:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <_avr_timer_cntcurr+0x2>
 26a:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <_avr_timer_cntcurr+0x3>
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	a1 09       	sbc	r26, r1
 272:	b1 09       	sbc	r27, r1
 274:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <_avr_timer_cntcurr>
 278:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <_avr_timer_cntcurr+0x1>
 27c:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <_avr_timer_cntcurr+0x2>
 280:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <_avr_timer_cntcurr+0x3>
 284:	89 2b       	or	r24, r25
 286:	8a 2b       	or	r24, r26
 288:	8b 2b       	or	r24, r27
 28a:	99 f4       	brne	.+38     	; 0x2b2 <__vector_13+0x66>
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <TimerFlag>
 292:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_avr_timer_M>
 296:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_avr_timer_M+0x1>
 29a:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <_avr_timer_M+0x2>
 29e:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <_avr_timer_M+0x3>
 2a2:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <_avr_timer_cntcurr>
 2a6:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <_avr_timer_cntcurr+0x1>
 2aa:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <_avr_timer_cntcurr+0x2>
 2ae:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <_avr_timer_cntcurr+0x3>
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <TimerSet>:
 2c4:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <_avr_timer_M>
 2c8:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <_avr_timer_M+0x1>
 2cc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_M+0x2>
 2d0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_M+0x3>
 2d4:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <_avr_timer_cntcurr>
 2d8:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <_avr_timer_cntcurr+0x1>
 2dc:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr+0x2>
 2e0:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x3>
 2e4:	08 95       	ret

000002e6 <transmit_data>:
//==========shift register function===========
void transmit_data(unsigned char data, unsigned char data2)
{
	int i;
	for(i = 0; i < 8; ++i)
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTB = 0x08;
 2ea:	58 e0       	ldi	r21, 0x08	; 8
		PORTC = 0x08;
		PORTB |= ((data >> i) & 0x01);
 2ec:	a8 2f       	mov	r26, r24
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
		PORTC |= ((data2 >> i) & 0x01);
 2f0:	70 e0       	ldi	r23, 0x00	; 0
void transmit_data(unsigned char data, unsigned char data2)
{
	int i;
	for(i = 0; i < 8; ++i)
	{
		PORTB = 0x08;
 2f2:	55 b9       	out	0x05, r21	; 5
		PORTC = 0x08;
 2f4:	58 b9       	out	0x08, r21	; 8
		PORTB |= ((data >> i) & 0x01);
 2f6:	45 b1       	in	r20, 0x05	; 5
 2f8:	fd 01       	movw	r30, r26
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <transmit_data+0x1c>
 2fe:	f5 95       	asr	r31
 300:	e7 95       	ror	r30
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <transmit_data+0x18>
 306:	9e 2f       	mov	r25, r30
 308:	91 70       	andi	r25, 0x01	; 1
 30a:	94 2b       	or	r25, r20
 30c:	95 b9       	out	0x05, r25	; 5
		PORTC |= ((data2 >> i) & 0x01);
 30e:	48 b1       	in	r20, 0x08	; 8
 310:	fb 01       	movw	r30, r22
 312:	02 2e       	mov	r0, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <transmit_data+0x34>
 316:	f5 95       	asr	r31
 318:	e7 95       	ror	r30
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <transmit_data+0x30>
 31e:	9e 2f       	mov	r25, r30
 320:	91 70       	andi	r25, 0x01	; 1
 322:	94 2b       	or	r25, r20
 324:	98 b9       	out	0x08, r25	; 8
		PORTB |= 0x02;
 326:	29 9a       	sbi	0x05, 1	; 5
		PORTC |= 0x02;
 328:	41 9a       	sbi	0x08, 1	; 8
//==========shift register function===========
void transmit_data(unsigned char data, unsigned char data2)
{
	int i;
	for(i = 0; i < 8; ++i)
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	28 30       	cpi	r18, 0x08	; 8
 330:	31 05       	cpc	r19, r1
 332:	f9 f6       	brne	.-66     	; 0x2f2 <transmit_data+0xc>
		PORTB |= ((data >> i) & 0x01);
		PORTC |= ((data2 >> i) & 0x01);
		PORTB |= 0x02;
		PORTC |= 0x02;
	}
	PORTB |= 0x04;
 334:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= 0x04;
 336:	42 9a       	sbi	0x08, 2	; 8
	PORTB = 0x00;
 338:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
 33a:	18 b8       	out	0x08, r1	; 8
 33c:	08 95       	ret

0000033e <display>:
	//===============actions================
	switch(state){
		case DISPLAY:
		//for(j = 0; j <= 29; j++)
		//{
			transmit_data(p1_sel, p1_val[p1_index]);
 33e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <p1_index>
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	e8 5f       	subi	r30, 0xF8	; 248
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	60 81       	ld	r22, Z
 34a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <p1_sel>
 34e:	cb df       	rcall	.-106    	; 0x2e6 <transmit_data>
			transmit_data(p2_sel, p2_val[p2_index]);
 350:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <p2_index>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	ef 5f       	subi	r30, 0xFF	; 255
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	60 81       	ld	r22, Z
 35c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 360:	c2 df       	rcall	.-124    	; 0x2e6 <transmit_data>
		
		default:
		break;
	}
	return state;
}
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	08 95       	ret

00000368 <main>:
	}
	return state;
}

int main(void)
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	00 d0       	rcall	.+0      	; 0x36e <main+0x6>
 36e:	00 d0       	rcall	.+0      	; 0x370 <main+0x8>
 370:	00 d0       	rcall	.+0      	; 0x372 <main+0xa>
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 376:	11 b8       	out	0x01, r1	; 1
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 37c:	84 b9       	out	0x04, r24	; 4
 37e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 380:	87 b9       	out	0x07, r24	; 7
 382:	18 b8       	out	0x08, r1	; 8
 384:	0f 2e       	mov	r0, r31
 386:	f2 e3       	ldi	r31, 0x32	; 50
 388:	df 2e       	mov	r13, r31
 38a:	f0 2d       	mov	r31, r0
 38c:	c1 2c       	mov	r12, r1
 38e:	b1 2c       	mov	r11, r1
 390:	a1 2c       	mov	r10, r1
 392:	52 e0       	ldi	r21, 0x02	; 2
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <main+0x3c>
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 39c:	d6 2e       	mov	r13, r22
 39e:	c7 2e       	mov	r12, r23
 3a0:	b8 2e       	mov	r11, r24
 3a2:	a9 2e       	mov	r10, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 3a4:	65 2f       	mov	r22, r21
 3a6:	74 2f       	mov	r23, r20
 3a8:	83 2f       	mov	r24, r19
 3aa:	92 2f       	mov	r25, r18
 3ac:	2d 2d       	mov	r18, r13
 3ae:	3c 2d       	mov	r19, r12
 3b0:	4b 2d       	mov	r20, r11
 3b2:	5a 2d       	mov	r21, r10
 3b4:	bb d0       	rcall	.+374    	; 0x52c <__udivmodsi4>
 3b6:	5d 2d       	mov	r21, r13
 3b8:	4c 2d       	mov	r20, r12
 3ba:	3b 2d       	mov	r19, r11
 3bc:	2a 2d       	mov	r18, r10
		if( c == 0 ) { return b; }
 3be:	61 15       	cp	r22, r1
 3c0:	71 05       	cpc	r23, r1
 3c2:	81 05       	cpc	r24, r1
 3c4:	91 05       	cpc	r25, r1
 3c6:	51 f7       	brne	.-44     	; 0x39c <main+0x34>
 3c8:	0f 2e       	mov	r0, r31
 3ca:	f2 e3       	ldi	r31, 0x32	; 50
 3cc:	ef 2e       	mov	r14, r31
 3ce:	f0 2d       	mov	r31, r0
 3d0:	f1 2c       	mov	r15, r1
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <main+0x78>
		a = b;
		b = c;
 3d8:	e6 2e       	mov	r14, r22
 3da:	f7 2e       	mov	r15, r23
 3dc:	08 2f       	mov	r16, r24
 3de:	19 2f       	mov	r17, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 3e0:	6d 2d       	mov	r22, r13
 3e2:	7c 2d       	mov	r23, r12
 3e4:	8b 2d       	mov	r24, r11
 3e6:	9a 2d       	mov	r25, r10
 3e8:	2e 2d       	mov	r18, r14
 3ea:	3f 2d       	mov	r19, r15
 3ec:	40 2f       	mov	r20, r16
 3ee:	51 2f       	mov	r21, r17
 3f0:	9d d0       	rcall	.+314    	; 0x52c <__udivmodsi4>
 3f2:	de 2c       	mov	r13, r14
 3f4:	cf 2c       	mov	r12, r15
 3f6:	b0 2e       	mov	r11, r16
 3f8:	a1 2e       	mov	r10, r17
		if( c == 0 ) { return b; }
 3fa:	61 15       	cp	r22, r1
 3fc:	71 05       	cpc	r23, r1
 3fe:	81 05       	cpc	r24, r1
 400:	91 05       	cpc	r25, r1
 402:	51 f7       	brne	.-44     	; 0x3d8 <main+0x70>
	unsigned long int p2_move_calc = 50;
	
	unsigned long int GCD = findGCD(display_calc, p1_move_calc);
	GCD = findGCD(GCD, p2_move_calc);
	
	unsigned long int display_period = display_calc/GCD;
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	2e 2d       	mov	r18, r14
 40e:	3f 2d       	mov	r19, r15
 410:	40 2f       	mov	r20, r16
 412:	51 2f       	mov	r21, r17
 414:	8b d0       	rcall	.+278    	; 0x52c <__udivmodsi4>
 416:	49 01       	movw	r8, r18
 418:	5a 01       	movw	r10, r20
	unsigned long int p1_move_period = p1_move_calc/GCD;
 41a:	62 e3       	ldi	r22, 0x32	; 50
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	2e 2d       	mov	r18, r14
 424:	3f 2d       	mov	r19, r15
 426:	40 2f       	mov	r20, r16
 428:	51 2f       	mov	r21, r17
 42a:	80 d0       	rcall	.+256    	; 0x52c <__udivmodsi4>
	unsigned long int p2_move_period = p2_move_calc/GCD;
	
	static task task1, task2, task3;
	task *tasks[] = {&task1, &task2, &task3};
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	e2 e1       	ldi	r30, 0x12	; 18
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	de 01       	movw	r26, r28
 434:	11 96       	adiw	r26, 0x01	; 1
 436:	01 90       	ld	r0, Z+
 438:	0d 92       	st	X+, r0
 43a:	8a 95       	dec	r24
 43c:	e1 f7       	brne	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	task1.state = -1;
 43e:	ee e2       	ldi	r30, 0x2E	; 46
 440:	f1 e0       	ldi	r31, 0x01	; 1
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	80 83       	st	Z, r24
	task1.period = display_period;
 446:	81 82       	std	Z+1, r8	; 0x01
 448:	92 82       	std	Z+2, r9	; 0x02
 44a:	a3 82       	std	Z+3, r10	; 0x03
 44c:	b4 82       	std	Z+4, r11	; 0x04
	task1.elapsedTime = display_period;
 44e:	85 82       	std	Z+5, r8	; 0x05
 450:	96 82       	std	Z+6, r9	; 0x06
 452:	a7 82       	std	Z+7, r10	; 0x07
 454:	b0 86       	std	Z+8, r11	; 0x08
	task1.TickFct = &display;
 456:	6f e9       	ldi	r22, 0x9F	; 159
 458:	71 e0       	ldi	r23, 0x01	; 1
 45a:	72 87       	std	Z+10, r23	; 0x0a
 45c:	61 87       	std	Z+9, r22	; 0x09
	
	task2.state = -1;
 45e:	e3 e2       	ldi	r30, 0x23	; 35
 460:	f1 e0       	ldi	r31, 0x01	; 1
 462:	80 83       	st	Z, r24
	task2.period = p1_move_period;
 464:	21 83       	std	Z+1, r18	; 0x01
 466:	32 83       	std	Z+2, r19	; 0x02
 468:	43 83       	std	Z+3, r20	; 0x03
 46a:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = p1_move_period;
 46c:	25 83       	std	Z+5, r18	; 0x05
 46e:	36 83       	std	Z+6, r19	; 0x06
 470:	47 83       	std	Z+7, r20	; 0x07
 472:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &p1_move;
 474:	64 e6       	ldi	r22, 0x64	; 100
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	72 87       	std	Z+10, r23	; 0x0a
 47a:	61 87       	std	Z+9, r22	; 0x09
	
	task3.state = -1;
 47c:	e8 e1       	ldi	r30, 0x18	; 24
 47e:	f1 e0       	ldi	r31, 0x01	; 1
 480:	80 83       	st	Z, r24
	task3.period = p2_move_period;
 482:	21 83       	std	Z+1, r18	; 0x01
 484:	32 83       	std	Z+2, r19	; 0x02
 486:	43 83       	std	Z+3, r20	; 0x03
 488:	54 83       	std	Z+4, r21	; 0x04
	task3.elapsedTime = p2_move_period;
 48a:	25 83       	std	Z+5, r18	; 0x05
 48c:	36 83       	std	Z+6, r19	; 0x06
 48e:	47 83       	std	Z+7, r20	; 0x07
 490:	50 87       	std	Z+8, r21	; 0x08
	task3.TickFct = &p2_move;
 492:	83 eb       	ldi	r24, 0xB3	; 179
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	92 87       	std	Z+10, r25	; 0x0a
 498:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(GCD);
 49a:	6e 2d       	mov	r22, r14
 49c:	7f 2d       	mov	r23, r15
 49e:	80 2f       	mov	r24, r16
 4a0:	91 2f       	mov	r25, r17
	TimerOn();
 4a2:	10 df       	rcall	.-480    	; 0x2c4 <TimerSet>
 4a4:	af de       	rcall	.-674    	; 0x204 <TimerOn>
 4a6:	7e 01       	movw	r14, r28
 4a8:	87 e0       	ldi	r24, 0x07	; 7
 4aa:	e8 0e       	add	r14, r24
 4ac:	f1 1c       	adc	r15, r1
 4ae:	de 01       	movw	r26, r28
 4b0:	11 96       	adiw	r26, 0x01	; 1
 4b2:	6d 01       	movw	r12, r26
	
	while(1)
	{
		for(unsigned int i = 0; i < numTasks; i++)
		{
			if(tasks[i]->elapsedTime == tasks[i]->period)
 4b4:	f6 01       	movw	r30, r12
 4b6:	01 91       	ld	r16, Z+
 4b8:	11 91       	ld	r17, Z+
 4ba:	6f 01       	movw	r12, r30
 4bc:	d8 01       	movw	r26, r16
 4be:	15 96       	adiw	r26, 0x05	; 5
 4c0:	4d 91       	ld	r20, X+
 4c2:	5d 91       	ld	r21, X+
 4c4:	6d 91       	ld	r22, X+
 4c6:	7c 91       	ld	r23, X
 4c8:	18 97       	sbiw	r26, 0x08	; 8
 4ca:	11 96       	adiw	r26, 0x01	; 1
 4cc:	8d 91       	ld	r24, X+
 4ce:	9d 91       	ld	r25, X+
 4d0:	0d 90       	ld	r0, X+
 4d2:	bc 91       	ld	r27, X
 4d4:	a0 2d       	mov	r26, r0
 4d6:	48 17       	cp	r20, r24
 4d8:	59 07       	cpc	r21, r25
 4da:	6a 07       	cpc	r22, r26
 4dc:	7b 07       	cpc	r23, r27
 4de:	81 f4       	brne	.+32     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			{
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 4e0:	f8 01       	movw	r30, r16
 4e2:	80 81       	ld	r24, Z
 4e4:	01 84       	ldd	r0, Z+9	; 0x09
 4e6:	f2 85       	ldd	r31, Z+10	; 0x0a
 4e8:	e0 2d       	mov	r30, r0
 4ea:	08 2e       	mov	r0, r24
 4ec:	00 0c       	add	r0, r0
 4ee:	99 0b       	sbc	r25, r25
 4f0:	09 95       	icall
 4f2:	d8 01       	movw	r26, r16
 4f4:	8c 93       	st	X, r24
				tasks[i]->elapsedTime = 0;
 4f6:	f8 01       	movw	r30, r16
 4f8:	15 82       	std	Z+5, r1	; 0x05
 4fa:	16 82       	std	Z+6, r1	; 0x06
 4fc:	17 82       	std	Z+7, r1	; 0x07
 4fe:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 500:	f8 01       	movw	r30, r16
 502:	85 81       	ldd	r24, Z+5	; 0x05
 504:	96 81       	ldd	r25, Z+6	; 0x06
 506:	a7 81       	ldd	r26, Z+7	; 0x07
 508:	b0 85       	ldd	r27, Z+8	; 0x08
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	a1 1d       	adc	r26, r1
 50e:	b1 1d       	adc	r27, r1
 510:	85 83       	std	Z+5, r24	; 0x05
 512:	96 83       	std	Z+6, r25	; 0x06
 514:	a7 83       	std	Z+7, r26	; 0x07
 516:	b0 87       	std	Z+8, r27	; 0x08
	TimerSet(GCD);
	TimerOn();
	
	while(1)
	{
		for(unsigned int i = 0; i < numTasks; i++)
 518:	ce 14       	cp	r12, r14
 51a:	df 04       	cpc	r13, r15
 51c:	59 f6       	brne	.-106    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 51e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <TimerFlag>
 522:	88 23       	and	r24, r24
 524:	e1 f3       	breq	.-8      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		TimerFlag = 0;
 526:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <TimerFlag>
	}
 52a:	c1 cf       	rjmp	.-126    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>

0000052c <__udivmodsi4>:
 52c:	a1 e2       	ldi	r26, 0x21	; 33
 52e:	1a 2e       	mov	r1, r26
 530:	aa 1b       	sub	r26, r26
 532:	bb 1b       	sub	r27, r27
 534:	fd 01       	movw	r30, r26
 536:	0d c0       	rjmp	.+26     	; 0x552 <__udivmodsi4_ep>

00000538 <__udivmodsi4_loop>:
 538:	aa 1f       	adc	r26, r26
 53a:	bb 1f       	adc	r27, r27
 53c:	ee 1f       	adc	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	a2 17       	cp	r26, r18
 542:	b3 07       	cpc	r27, r19
 544:	e4 07       	cpc	r30, r20
 546:	f5 07       	cpc	r31, r21
 548:	20 f0       	brcs	.+8      	; 0x552 <__udivmodsi4_ep>
 54a:	a2 1b       	sub	r26, r18
 54c:	b3 0b       	sbc	r27, r19
 54e:	e4 0b       	sbc	r30, r20
 550:	f5 0b       	sbc	r31, r21

00000552 <__udivmodsi4_ep>:
 552:	66 1f       	adc	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	1a 94       	dec	r1
 55c:	69 f7       	brne	.-38     	; 0x538 <__udivmodsi4_loop>
 55e:	60 95       	com	r22
 560:	70 95       	com	r23
 562:	80 95       	com	r24
 564:	90 95       	com	r25
 566:	9b 01       	movw	r18, r22
 568:	ac 01       	movw	r20, r24
 56a:	bd 01       	movw	r22, r26
 56c:	cf 01       	movw	r24, r30
 56e:	08 95       	ret

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>

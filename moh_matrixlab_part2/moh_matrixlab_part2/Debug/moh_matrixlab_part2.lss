
moh_matrixlab_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002e2  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800106  00800106  0000037c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b03  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000969  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000407  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051d  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c9  00000000  00000000  0000229d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002566  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ba c0       	rjmp	.+372    	; 0x1aa <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ee       	ldi	r30, 0xE2	; 226
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c0 d0       	rcall	.+384    	; 0x244 <main>
  c4:	0c c1       	rjmp	.+536    	; 0x2de <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SM1_Tick>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	20 b1       	in	r18, 0x00	; 0
  ca:	20 95       	com	r18
  cc:	2f 70       	andi	r18, 0x0F	; 15
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	91 05       	cpc	r25, r1
  d2:	51 f0       	breq	.+20     	; 0xe8 <SM1_Tick+0x20>
  d4:	1c f4       	brge	.+6      	; 0xdc <SM1_Tick+0x14>
  d6:	89 2b       	or	r24, r25
  d8:	a9 f1       	breq	.+106    	; 0x144 <SM1_Tick+0x7c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SM1_Tick+0x3e>
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	91 05       	cpc	r25, r1
  e0:	41 f0       	breq	.+16     	; 0xf2 <SM1_Tick+0x2a>
  e2:	03 97       	sbiw	r24, 0x03	; 3
  e4:	59 f0       	breq	.+22     	; 0xfc <SM1_Tick+0x34>
  e6:	0f c0       	rjmp	.+30     	; 0x106 <SM1_Tick+0x3e>
  e8:	24 30       	cpi	r18, 0x04	; 4
  ea:	b1 f0       	breq	.+44     	; 0x118 <SM1_Tick+0x50>
  ec:	28 30       	cpi	r18, 0x08	; 8
  ee:	91 f5       	brne	.+100    	; 0x154 <SM1_Tick+0x8c>
  f0:	1e c0       	rjmp	.+60     	; 0x12e <SM1_Tick+0x66>
  f2:	24 30       	cpi	r18, 0x04	; 4
  f4:	89 f0       	breq	.+34     	; 0x118 <SM1_Tick+0x50>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	2c c0       	rjmp	.+88     	; 0x154 <SM1_Tick+0x8c>
  fc:	28 30       	cpi	r18, 0x08	; 8
  fe:	b9 f0       	breq	.+46     	; 0x12e <SM1_Tick+0x66>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	27 c0       	rjmp	.+78     	; 0x154 <SM1_Tick+0x8c>
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <column_val.1851>
 10c:	8f e7       	ldi	r24, 0x7F	; 127
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	1e c0       	rjmp	.+60     	; 0x154 <SM1_Tick+0x8c>
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 11c:	8f 37       	cpi	r24, 0x7F	; 127
 11e:	a9 f0       	breq	.+42     	; 0x14a <SM1_Tick+0x82>
 120:	88 0f       	add	r24, r24
 122:	81 60       	ori	r24, 0x01	; 1
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	13 c0       	rjmp	.+38     	; 0x154 <SM1_Tick+0x8c>
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 132:	8e 3f       	cpi	r24, 0xFE	; 254
 134:	69 f0       	breq	.+26     	; 0x150 <SM1_Tick+0x88>
 136:	86 95       	lsr	r24
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 c0       	rjmp	.+16     	; 0x154 <SM1_Tick+0x8c>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	05 c0       	rjmp	.+10     	; 0x154 <SM1_Tick+0x8c>
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <SM1_Tick+0x8c>
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <column_val.1851>
 158:	28 b9       	out	0x08, r18	; 8
 15a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 15e:	25 b9       	out	0x05, r18	; 5
 160:	08 95       	ret

00000162 <TimerOn>:
 162:	8b e0       	ldi	r24, 0x0B	; 11
 164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 168:	8d e7       	ldi	r24, 0x7D	; 125
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 170:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 17a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 17e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 182:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 186:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 18a:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 18e:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 192:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 196:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 19a:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 19e:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 1a2:	8f b7       	in	r24, 0x3f	; 63
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	8f bf       	out	0x3f, r24	; 63
 1a8:	08 95       	ret

000001aa <__vector_13>:
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 1c0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 1c4:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 1c8:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	a1 09       	sbc	r26, r1
 1d0:	b1 09       	sbc	r27, r1
 1d2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 1d6:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 1da:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 1de:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 1e2:	89 2b       	or	r24, r25
 1e4:	8a 2b       	or	r24, r26
 1e6:	8b 2b       	or	r24, r27
 1e8:	99 f4       	brne	.+38     	; 0x210 <__vector_13+0x66>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <TimerFlag>
 1f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 1f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 1f8:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 1fc:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 200:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 204:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 208:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 20c:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <TimerSet>:
 222:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 226:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 22a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 22e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
 232:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <_avr_timer_cntcurr>
 236:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <_avr_timer_cntcurr+0x1>
 23a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr+0x2>
 23e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x3>
 242:	08 95       	ret

00000244 <main>:
	return state;
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 244:	11 b8       	out	0x01, r1	; 1
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 24a:	87 b9       	out	0x07, r24	; 7
 24c:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
 24e:	84 b9       	out	0x04, r24	; 4
 250:	15 b8       	out	0x05, r1	; 5
	
	static task task1;
	task *tasks[] = {&task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	task1.state = -1;
 252:	e6 e0       	ldi	r30, 0x06	; 6
 254:	f1 e0       	ldi	r31, 0x01	; 1
 256:	80 83       	st	Z, r24
	task1.period = SM1_Tick1_period;
 258:	84 e6       	ldi	r24, 0x64	; 100
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	a0 e0       	ldi	r26, 0x00	; 0
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	81 83       	std	Z+1, r24	; 0x01
 262:	92 83       	std	Z+2, r25	; 0x02
 264:	a3 83       	std	Z+3, r26	; 0x03
 266:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SM1_Tick1_period;
 268:	85 83       	std	Z+5, r24	; 0x05
 26a:	96 83       	std	Z+6, r25	; 0x06
 26c:	a7 83       	std	Z+7, r26	; 0x07
 26e:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SM1_Tick;
 270:	84 e6       	ldi	r24, 0x64	; 100
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	92 87       	std	Z+10, r25	; 0x0a
 276:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(GCD);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	d0 df       	rcall	.-96     	; 0x222 <TimerSet>
	TimerOn();
 282:	6f df       	rcall	.-290    	; 0x162 <TimerOn>
 284:	c6 e0       	ldi	r28, 0x06	; 6
	
	while(1)
	{
		for(unsigned int i = 0; i < numTasks; i++)
		{
			if(tasks[i]->elapsedTime == tasks[i]->period)
 286:	d1 e0       	ldi	r29, 0x01	; 1
 288:	4d 81       	ldd	r20, Y+5	; 0x05
 28a:	5e 81       	ldd	r21, Y+6	; 0x06
 28c:	6f 81       	ldd	r22, Y+7	; 0x07
 28e:	78 85       	ldd	r23, Y+8	; 0x08
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	ab 81       	ldd	r26, Y+3	; 0x03
 296:	bc 81       	ldd	r27, Y+4	; 0x04
 298:	48 17       	cp	r20, r24
 29a:	59 07       	cpc	r21, r25
 29c:	6a 07       	cpc	r22, r26
 29e:	7b 07       	cpc	r23, r27
 2a0:	61 f4       	brne	.+24     	; 0x2ba <main+0x76>
 2a2:	88 81       	ld	r24, Y
			{
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 2a4:	e9 85       	ldd	r30, Y+9	; 0x09
 2a6:	fa 85       	ldd	r31, Y+10	; 0x0a
 2a8:	08 2e       	mov	r0, r24
 2aa:	00 0c       	add	r0, r0
 2ac:	99 0b       	sbc	r25, r25
 2ae:	09 95       	icall
 2b0:	88 83       	st	Y, r24
 2b2:	1d 82       	std	Y+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 2b4:	1e 82       	std	Y+6, r1	; 0x06
 2b6:	1f 82       	std	Y+7, r1	; 0x07
 2b8:	18 86       	std	Y+8, r1	; 0x08
 2ba:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 2bc:	9e 81       	ldd	r25, Y+6	; 0x06
 2be:	af 81       	ldd	r26, Y+7	; 0x07
 2c0:	b8 85       	ldd	r27, Y+8	; 0x08
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	a1 1d       	adc	r26, r1
 2c6:	b1 1d       	adc	r27, r1
 2c8:	8d 83       	std	Y+5, r24	; 0x05
 2ca:	9e 83       	std	Y+6, r25	; 0x06
 2cc:	af 83       	std	Y+7, r26	; 0x07
 2ce:	b8 87       	std	Y+8, r27	; 0x08
 2d0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFlag>
		}
		while(!TimerFlag);
 2d4:	88 23       	and	r24, r24
 2d6:	e1 f3       	breq	.-8      	; 0x2d0 <main+0x8c>
 2d8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <TimerFlag>
		TimerFlag = 0;
 2dc:	d5 cf       	rjmp	.-86     	; 0x288 <main+0x44>

000002de <_exit>:
	}
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>

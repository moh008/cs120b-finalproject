
moh_matrixlab_sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800106  00800106  00000324  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae2  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095a  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ce  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023c  00000000  00000000  000021bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000023fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	90 c0       	rjmp	.+288    	; 0x156 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	96 d0       	rcall	.+300    	; 0x1f0 <main>
  c4:	e0 c0       	rjmp	.+448    	; 0x286 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SM1_Tick>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <column_sel.1849>
  cc:	8e 3f       	cpi	r24, 0xFE	; 254
  ce:	91 f4       	brne	.+36     	; 0xf4 <SM1_Tick+0x2c>
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d4:	80 38       	cpi	r24, 0x80	; 128
  d6:	39 f4       	brne	.+14     	; 0xe6 <SM1_Tick+0x1e>
  d8:	8f e7       	ldi	r24, 0x7F	; 127
  da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <column_sel.1849>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  e4:	0b c0       	rjmp	.+22     	; 0xfc <SM1_Tick+0x34>
  e6:	9f e7       	ldi	r25, 0x7F	; 127
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <column_sel.1849>
  ec:	88 0f       	add	r24, r24
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  f2:	04 c0       	rjmp	.+8      	; 0xfc <SM1_Tick+0x34>
  f4:	86 95       	lsr	r24
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <column_sel.1849>
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 100:	88 b9       	out	0x08, r24	; 8
 102:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <column_sel.1849>
 106:	85 b9       	out	0x05, r24	; 5
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	08 95       	ret

0000010e <TimerOn>:
 10e:	8b e0       	ldi	r24, 0x0B	; 11
 110:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 114:	8d e7       	ldi	r24, 0x7D	; 125
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 11c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 126:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 12e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 132:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 136:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 13a:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 13e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 142:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 146:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 14a:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 14e:	8f b7       	in	r24, 0x3f	; 63
 150:	80 68       	ori	r24, 0x80	; 128
 152:	8f bf       	out	0x3f, r24	; 63
 154:	08 95       	ret

00000156 <__vector_13>:
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 16c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 170:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 174:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	a1 09       	sbc	r26, r1
 17c:	b1 09       	sbc	r27, r1
 17e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 182:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 186:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 18a:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 18e:	89 2b       	or	r24, r25
 190:	8a 2b       	or	r24, r26
 192:	8b 2b       	or	r24, r27
 194:	99 f4       	brne	.+38     	; 0x1bc <__vector_13+0x66>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <TimerFlag>
 19c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 1a0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 1a4:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 1a8:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 1ac:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 1b0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 1b4:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 1b8:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <TimerSet>:
 1ce:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 1d2:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 1d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 1da:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
 1de:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <_avr_timer_cntcurr>
 1e2:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <_avr_timer_cntcurr+0x1>
 1e6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr+0x2>
 1ea:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x3>
 1ee:	08 95       	ret

000001f0 <main>:
	return state;
}

int main(void)
{
	DDRC = 0xFF; PORTC = 0x00;
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	87 b9       	out	0x07, r24	; 7
 1f4:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
 1f6:	84 b9       	out	0x04, r24	; 4
 1f8:	15 b8       	out	0x05, r1	; 5
	
	static task task1;
	task *tasks[] = {&task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	task1.state = 0;
 1fa:	e6 e0       	ldi	r30, 0x06	; 6
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	10 82       	st	Z, r1
	task1.period = SM1_Tick1_period;
 200:	84 e6       	ldi	r24, 0x64	; 100
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	a0 e0       	ldi	r26, 0x00	; 0
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	81 83       	std	Z+1, r24	; 0x01
 20a:	92 83       	std	Z+2, r25	; 0x02
 20c:	a3 83       	std	Z+3, r26	; 0x03
 20e:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SM1_Tick1_period;
 210:	85 83       	std	Z+5, r24	; 0x05
 212:	96 83       	std	Z+6, r25	; 0x06
 214:	a7 83       	std	Z+7, r26	; 0x07
 216:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SM1_Tick;
 218:	84 e6       	ldi	r24, 0x64	; 100
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	92 87       	std	Z+10, r25	; 0x0a
 21e:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(GCD);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	d2 df       	rcall	.-92     	; 0x1ce <TimerSet>
	TimerOn();
 22a:	71 df       	rcall	.-286    	; 0x10e <TimerOn>
 22c:	c6 e0       	ldi	r28, 0x06	; 6
	
	while(1)
	{
		for(unsigned int i = 0; i < numTasks; i++)
		{
			if(tasks[i]->elapsedTime >= tasks[i]->period)
 22e:	d1 e0       	ldi	r29, 0x01	; 1
 230:	4d 81       	ldd	r20, Y+5	; 0x05
 232:	5e 81       	ldd	r21, Y+6	; 0x06
 234:	6f 81       	ldd	r22, Y+7	; 0x07
 236:	78 85       	ldd	r23, Y+8	; 0x08
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	9a 81       	ldd	r25, Y+2	; 0x02
 23c:	ab 81       	ldd	r26, Y+3	; 0x03
 23e:	bc 81       	ldd	r27, Y+4	; 0x04
 240:	48 17       	cp	r20, r24
 242:	59 07       	cpc	r21, r25
 244:	6a 07       	cpc	r22, r26
 246:	7b 07       	cpc	r23, r27
 248:	60 f0       	brcs	.+24     	; 0x262 <main+0x72>
 24a:	88 81       	ld	r24, Y
			{
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 24c:	e9 85       	ldd	r30, Y+9	; 0x09
 24e:	fa 85       	ldd	r31, Y+10	; 0x0a
 250:	08 2e       	mov	r0, r24
 252:	00 0c       	add	r0, r0
 254:	99 0b       	sbc	r25, r25
 256:	09 95       	icall
 258:	88 83       	st	Y, r24
 25a:	1d 82       	std	Y+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 25c:	1e 82       	std	Y+6, r1	; 0x06
 25e:	1f 82       	std	Y+7, r1	; 0x07
 260:	18 86       	std	Y+8, r1	; 0x08
 262:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 264:	9e 81       	ldd	r25, Y+6	; 0x06
 266:	af 81       	ldd	r26, Y+7	; 0x07
 268:	b8 85       	ldd	r27, Y+8	; 0x08
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	a1 1d       	adc	r26, r1
 26e:	b1 1d       	adc	r27, r1
 270:	8d 83       	std	Y+5, r24	; 0x05
 272:	9e 83       	std	Y+6, r25	; 0x06
 274:	af 83       	std	Y+7, r26	; 0x07
 276:	b8 87       	std	Y+8, r27	; 0x08
 278:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFlag>
		}
		while(!TimerFlag);
 27c:	88 23       	and	r24, r24
 27e:	e1 f3       	breq	.-8      	; 0x278 <main+0x88>
 280:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <TimerFlag>
		TimerFlag = 0;
 284:	d5 cf       	rjmp	.-86     	; 0x230 <main+0x40>

00000286 <_exit>:
	}
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>

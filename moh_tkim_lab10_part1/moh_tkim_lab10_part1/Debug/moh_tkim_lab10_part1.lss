
moh_tkim_lab10_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000006e6  0000077a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800104  00800104  0000077e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001125  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fc  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f7  00000000  00000000  000023c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cf  00000000  00000000  00002d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000658  00000000  00000000  00003323  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000397b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ac c0       	rjmp	.+344    	; 0x15a <__ctors_end>
   2:	00 00       	nop
   4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
   6:	00 00       	nop
   8:	c5 c0       	rjmp	.+394    	; 0x194 <__bad_interrupt>
   a:	00 00       	nop
   c:	c3 c0       	rjmp	.+390    	; 0x194 <__bad_interrupt>
   e:	00 00       	nop
  10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
  12:	00 00       	nop
  14:	bf c0       	rjmp	.+382    	; 0x194 <__bad_interrupt>
  16:	00 00       	nop
  18:	bd c0       	rjmp	.+378    	; 0x194 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
  22:	00 00       	nop
  24:	b7 c0       	rjmp	.+366    	; 0x194 <__bad_interrupt>
  26:	00 00       	nop
  28:	b5 c0       	rjmp	.+362    	; 0x194 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b3 c0       	rjmp	.+358    	; 0x194 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c1       	rjmp	.+744    	; 0x31e <__vector_13>
  36:	00 00       	nop
  38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ab c0       	rjmp	.+342    	; 0x194 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
  42:	00 00       	nop
  44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
  46:	00 00       	nop
  48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
  52:	00 00       	nop
  54:	9f c0       	rjmp	.+318    	; 0x194 <__bad_interrupt>
  56:	00 00       	nop
  58:	9d c0       	rjmp	.+314    	; 0x194 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9b c0       	rjmp	.+310    	; 0x194 <__bad_interrupt>
  5e:	00 00       	nop
  60:	99 c0       	rjmp	.+306    	; 0x194 <__bad_interrupt>
  62:	00 00       	nop
  64:	97 c0       	rjmp	.+302    	; 0x194 <__bad_interrupt>
  66:	00 00       	nop
  68:	95 c0       	rjmp	.+298    	; 0x194 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	93 c0       	rjmp	.+294    	; 0x194 <__bad_interrupt>
  6e:	00 00       	nop
  70:	91 c0       	rjmp	.+290    	; 0x194 <__bad_interrupt>
  72:	00 00       	nop
  74:	8f c0       	rjmp	.+286    	; 0x194 <__bad_interrupt>
  76:	00 00       	nop
  78:	8d c0       	rjmp	.+282    	; 0x194 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8b c0       	rjmp	.+278    	; 0x194 <__bad_interrupt>
  7e:	00 00       	nop
  80:	89 c0       	rjmp	.+274    	; 0x194 <__bad_interrupt>
  82:	00 00       	nop
  84:	87 c0       	rjmp	.+270    	; 0x194 <__bad_interrupt>
  86:	00 00       	nop
  88:	85 c0       	rjmp	.+266    	; 0x194 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5f 01       	movw	r10, r30
  8e:	64 01       	movw	r12, r8
  90:	64 01       	movw	r12, r8
  92:	64 01       	movw	r12, r8
  94:	64 01       	movw	r12, r8
  96:	64 01       	movw	r12, r8
  98:	64 01       	movw	r12, r8
  9a:	55 01       	movw	r10, r10
  9c:	64 01       	movw	r12, r8
  9e:	64 01       	movw	r12, r8
  a0:	64 01       	movw	r12, r8
  a2:	64 01       	movw	r12, r8
  a4:	64 01       	movw	r12, r8
  a6:	5a 01       	movw	r10, r20
  a8:	14 01       	movw	r2, r8
  aa:	19 01       	movw	r2, r18
  ac:	1e 01       	movw	r2, r28
  ae:	23 01       	movw	r4, r6
  b0:	28 01       	movw	r4, r16
  b2:	2d 01       	movw	r4, r26
  b4:	32 01       	movw	r6, r4
  b6:	37 01       	movw	r6, r14
  b8:	3c 01       	movw	r6, r24
  ba:	64 01       	movw	r12, r8
  bc:	64 01       	movw	r12, r8
  be:	64 01       	movw	r12, r8
  c0:	64 01       	movw	r12, r8
  c2:	64 01       	movw	r12, r8
  c4:	64 01       	movw	r12, r8
  c6:	64 01       	movw	r12, r8
  c8:	41 01       	movw	r8, r2
  ca:	46 01       	movw	r8, r12
  cc:	4b 01       	movw	r8, r22
  ce:	50 01       	movw	r10, r0
  d0:	dc 02       	muls	r29, r28
  d2:	04 03       	mulsu	r16, r20
  d4:	04 03       	mulsu	r16, r20
  d6:	04 03       	mulsu	r16, r20
  d8:	04 03       	mulsu	r16, r20
  da:	04 03       	mulsu	r16, r20
  dc:	04 03       	mulsu	r16, r20
  de:	04 03       	mulsu	r16, r20
  e0:	04 03       	mulsu	r16, r20
  e2:	04 03       	mulsu	r16, r20
  e4:	04 03       	mulsu	r16, r20
  e6:	04 03       	mulsu	r16, r20
  e8:	04 03       	mulsu	r16, r20
  ea:	04 03       	mulsu	r16, r20
  ec:	04 03       	mulsu	r16, r20
  ee:	04 03       	mulsu	r16, r20
  f0:	04 03       	mulsu	r16, r20
  f2:	04 03       	mulsu	r16, r20
  f4:	04 03       	mulsu	r16, r20
  f6:	04 03       	mulsu	r16, r20
  f8:	04 03       	mulsu	r16, r20
  fa:	04 03       	mulsu	r16, r20
  fc:	04 03       	mulsu	r16, r20
  fe:	04 03       	mulsu	r16, r20
 100:	04 03       	mulsu	r16, r20
 102:	04 03       	mulsu	r16, r20
 104:	04 03       	mulsu	r16, r20
 106:	04 03       	mulsu	r16, r20
 108:	04 03       	mulsu	r16, r20
 10a:	04 03       	mulsu	r16, r20
 10c:	04 03       	mulsu	r16, r20
 10e:	04 03       	mulsu	r16, r20
 110:	04 03       	mulsu	r16, r20
 112:	04 03       	mulsu	r16, r20
 114:	04 03       	mulsu	r16, r20
 116:	02 03       	mulsu	r16, r18
 118:	04 03       	mulsu	r16, r20
 11a:	04 03       	mulsu	r16, r20
 11c:	04 03       	mulsu	r16, r20
 11e:	04 03       	mulsu	r16, r20
 120:	04 03       	mulsu	r16, r20
 122:	04 03       	mulsu	r16, r20
 124:	fe 02       	muls	r31, r30
 126:	04 03       	mulsu	r16, r20
 128:	04 03       	mulsu	r16, r20
 12a:	04 03       	mulsu	r16, r20
 12c:	04 03       	mulsu	r16, r20
 12e:	04 03       	mulsu	r16, r20
 130:	00 03       	mulsu	r16, r16
 132:	df 02       	muls	r29, r31
 134:	e2 02       	muls	r30, r18
 136:	e5 02       	muls	r30, r21
 138:	e8 02       	muls	r30, r24
 13a:	eb 02       	muls	r30, r27
 13c:	ee 02       	muls	r30, r30
 13e:	f0 02       	muls	r31, r16
 140:	f2 02       	muls	r31, r18
 142:	f4 02       	muls	r31, r20
 144:	04 03       	mulsu	r16, r20
 146:	04 03       	mulsu	r16, r20
 148:	04 03       	mulsu	r16, r20
 14a:	04 03       	mulsu	r16, r20
 14c:	04 03       	mulsu	r16, r20
 14e:	04 03       	mulsu	r16, r20
 150:	04 03       	mulsu	r16, r20
 152:	f6 02       	muls	r31, r22
 154:	f8 02       	muls	r31, r24
 156:	fa 02       	muls	r31, r26
 158:	fc 02       	muls	r31, r28

0000015a <__ctors_end>:
 15a:	11 24       	eor	r1, r1
 15c:	1f be       	out	0x3f, r1	; 63
 15e:	cf ef       	ldi	r28, 0xFF	; 255
 160:	d0 e4       	ldi	r29, 0x40	; 64
 162:	de bf       	out	0x3e, r29	; 62
 164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
 166:	11 e0       	ldi	r17, 0x01	; 1
 168:	a0 e0       	ldi	r26, 0x00	; 0
 16a:	b1 e0       	ldi	r27, 0x01	; 1
 16c:	e6 ee       	ldi	r30, 0xE6	; 230
 16e:	f6 e0       	ldi	r31, 0x06	; 6
 170:	00 e0       	ldi	r16, 0x00	; 0
 172:	0b bf       	out	0x3b, r16	; 59
 174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x14>
 176:	07 90       	elpm	r0, Z+
 178:	0d 92       	st	X+, r0
 17a:	a4 30       	cpi	r26, 0x04	; 4
 17c:	b1 07       	cpc	r27, r17
 17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0x10>

00000180 <__do_clear_bss>:
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	a4 e0       	ldi	r26, 0x04	; 4
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
 188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
 18a:	a0 32       	cpi	r26, 0x20	; 32
 18c:	b2 07       	cpc	r27, r18
 18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
 190:	66 d1       	rcall	.+716    	; 0x45e <main>
 192:	a7 c2       	rjmp	.+1358   	; 0x6e2 <_exit>

00000194 <__bad_interrupt>:
 194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <delay_ms>:
		if (c==0){ return b;}
		a = b;
		b = c;
	}
	return 0;
}
 196:	18 16       	cp	r1, r24
 198:	19 06       	cpc	r1, r25
 19a:	5c f0       	brlt	.+22     	; 0x1b2 <delay_ms+0x1c>
 19c:	08 95       	ret
 19e:	00 00       	nop
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	31 09       	sbc	r19, r1
 1a4:	e1 f7       	brne	.-8      	; 0x19e <delay_ms+0x8>
 1a6:	4f 5f       	subi	r20, 0xFF	; 255
 1a8:	5f 4f       	sbci	r21, 0xFF	; 255
 1aa:	84 17       	cp	r24, r20
 1ac:	95 07       	cpc	r25, r21
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <delay_ms+0x20>
 1b0:	08 95       	ret
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	27 e0       	ldi	r18, 0x07	; 7
 1b8:	33 e0       	ldi	r19, 0x03	; 3
 1ba:	f1 cf       	rjmp	.-30     	; 0x19e <delay_ms+0x8>

000001bc <LCD_WriteCommand>:
 1bc:	10 98       	cbi	0x02, 0	; 2
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	11 9a       	sbi	0x02, 1	; 2
 1c2:	00 00       	nop
 1c4:	11 98       	cbi	0x02, 1	; 2
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	e5 cf       	rjmp	.-54     	; 0x196 <delay_ms>
 1cc:	08 95       	ret

000001ce <LCD_Cursor>:
 1ce:	81 31       	cpi	r24, 0x11	; 17
 1d0:	18 f4       	brcc	.+6      	; 0x1d8 <LCD_Cursor+0xa>
 1d2:	81 58       	subi	r24, 0x81	; 129
 1d4:	f3 cf       	rjmp	.-26     	; 0x1bc <LCD_WriteCommand>
 1d6:	08 95       	ret
 1d8:	81 55       	subi	r24, 0x51	; 81
 1da:	f0 cf       	rjmp	.-32     	; 0x1bc <LCD_WriteCommand>
 1dc:	08 95       	ret

000001de <LCD_init>:
 1de:	84 e6       	ldi	r24, 0x64	; 100
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	d9 df       	rcall	.-78     	; 0x196 <delay_ms>
 1e4:	88 e3       	ldi	r24, 0x38	; 56
 1e6:	ea df       	rcall	.-44     	; 0x1bc <LCD_WriteCommand>
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	e8 df       	rcall	.-48     	; 0x1bc <LCD_WriteCommand>
 1ec:	8f e0       	ldi	r24, 0x0F	; 15
 1ee:	e6 df       	rcall	.-52     	; 0x1bc <LCD_WriteCommand>
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	e4 df       	rcall	.-56     	; 0x1bc <LCD_WriteCommand>
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ce cf       	rjmp	.-100    	; 0x196 <delay_ms>
 1fa:	08 95       	ret

000001fc <LCD_WriteData>:
 1fc:	10 9a       	sbi	0x02, 0	; 2
 1fe:	8b b9       	out	0x0b, r24	; 11
 200:	11 9a       	sbi	0x02, 1	; 2
 202:	00 00       	nop
 204:	11 98       	cbi	0x02, 1	; 2
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	c5 cf       	rjmp	.-118    	; 0x196 <delay_ms>
 20c:	08 95       	ret

0000020e <SMTick2>:
 20e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <x>
 212:	8e 2f       	mov	r24, r30
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	b3 97       	sbiw	r30, 0x23	; 35
 21a:	e2 32       	cpi	r30, 0x22	; 34
 21c:	f1 05       	cpc	r31, r1
 21e:	08 f0       	brcs	.+2      	; 0x222 <SMTick2+0x14>
 220:	53 c0       	rjmp	.+166    	; 0x2c8 <SMTick2+0xba>
 222:	ea 5b       	subi	r30, 0xBA	; 186
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	54 c2       	rjmp	.+1192   	; 0x6d0 <__tablejump2__>
 228:	81 e3       	ldi	r24, 0x31	; 49
 22a:	e8 df       	rcall	.-48     	; 0x1fc <LCD_WriteData>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	cf df       	rcall	.-98     	; 0x1ce <LCD_Cursor>
 230:	4f c0       	rjmp	.+158    	; 0x2d0 <SMTick2+0xc2>
 232:	82 e3       	ldi	r24, 0x32	; 50
 234:	e3 df       	rcall	.-58     	; 0x1fc <LCD_WriteData>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	ca df       	rcall	.-108    	; 0x1ce <LCD_Cursor>
 23a:	4a c0       	rjmp	.+148    	; 0x2d0 <SMTick2+0xc2>
 23c:	83 e3       	ldi	r24, 0x33	; 51
 23e:	de df       	rcall	.-68     	; 0x1fc <LCD_WriteData>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	c5 df       	rcall	.-118    	; 0x1ce <LCD_Cursor>
 244:	45 c0       	rjmp	.+138    	; 0x2d0 <SMTick2+0xc2>
 246:	84 e3       	ldi	r24, 0x34	; 52
 248:	d9 df       	rcall	.-78     	; 0x1fc <LCD_WriteData>
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	c0 df       	rcall	.-128    	; 0x1ce <LCD_Cursor>
 24e:	40 c0       	rjmp	.+128    	; 0x2d0 <SMTick2+0xc2>
 250:	85 e3       	ldi	r24, 0x35	; 53
 252:	d4 df       	rcall	.-88     	; 0x1fc <LCD_WriteData>
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	bb df       	rcall	.-138    	; 0x1ce <LCD_Cursor>
 258:	3b c0       	rjmp	.+118    	; 0x2d0 <SMTick2+0xc2>
 25a:	86 e3       	ldi	r24, 0x36	; 54
 25c:	cf df       	rcall	.-98     	; 0x1fc <LCD_WriteData>
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	b6 df       	rcall	.-148    	; 0x1ce <LCD_Cursor>
 262:	36 c0       	rjmp	.+108    	; 0x2d0 <SMTick2+0xc2>
 264:	87 e3       	ldi	r24, 0x37	; 55
 266:	ca df       	rcall	.-108    	; 0x1fc <LCD_WriteData>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	b1 df       	rcall	.-158    	; 0x1ce <LCD_Cursor>
 26c:	31 c0       	rjmp	.+98     	; 0x2d0 <SMTick2+0xc2>
 26e:	88 e3       	ldi	r24, 0x38	; 56
 270:	c5 df       	rcall	.-118    	; 0x1fc <LCD_WriteData>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	ac df       	rcall	.-168    	; 0x1ce <LCD_Cursor>
 276:	2c c0       	rjmp	.+88     	; 0x2d0 <SMTick2+0xc2>
 278:	89 e3       	ldi	r24, 0x39	; 57
 27a:	c0 df       	rcall	.-128    	; 0x1fc <LCD_WriteData>
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	a7 df       	rcall	.-178    	; 0x1ce <LCD_Cursor>
 280:	27 c0       	rjmp	.+78     	; 0x2d0 <SMTick2+0xc2>
 282:	81 e4       	ldi	r24, 0x41	; 65
 284:	bb df       	rcall	.-138    	; 0x1fc <LCD_WriteData>
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	a2 df       	rcall	.-188    	; 0x1ce <LCD_Cursor>
 28a:	22 c0       	rjmp	.+68     	; 0x2d0 <SMTick2+0xc2>
 28c:	82 e4       	ldi	r24, 0x42	; 66
 28e:	b6 df       	rcall	.-148    	; 0x1fc <LCD_WriteData>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	9d df       	rcall	.-198    	; 0x1ce <LCD_Cursor>
 294:	1d c0       	rjmp	.+58     	; 0x2d0 <SMTick2+0xc2>
 296:	83 e4       	ldi	r24, 0x43	; 67
 298:	b1 df       	rcall	.-158    	; 0x1fc <LCD_WriteData>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	98 df       	rcall	.-208    	; 0x1ce <LCD_Cursor>
 29e:	18 c0       	rjmp	.+48     	; 0x2d0 <SMTick2+0xc2>
 2a0:	84 e4       	ldi	r24, 0x44	; 68
 2a2:	ac df       	rcall	.-168    	; 0x1fc <LCD_WriteData>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	93 df       	rcall	.-218    	; 0x1ce <LCD_Cursor>
 2a8:	13 c0       	rjmp	.+38     	; 0x2d0 <SMTick2+0xc2>
 2aa:	8a e2       	ldi	r24, 0x2A	; 42
 2ac:	a7 df       	rcall	.-178    	; 0x1fc <LCD_WriteData>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	8e df       	rcall	.-228    	; 0x1ce <LCD_Cursor>
 2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <SMTick2+0xc2>
 2b4:	80 e3       	ldi	r24, 0x30	; 48
 2b6:	a2 df       	rcall	.-188    	; 0x1fc <LCD_WriteData>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	89 df       	rcall	.-238    	; 0x1ce <LCD_Cursor>
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <SMTick2+0xc2>
 2be:	83 e2       	ldi	r24, 0x23	; 35
 2c0:	9d df       	rcall	.-198    	; 0x1fc <LCD_WriteData>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	84 df       	rcall	.-248    	; 0x1ce <LCD_Cursor>
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <SMTick2+0xc2>
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	98 df       	rcall	.-208    	; 0x1fc <LCD_WriteData>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	7f df       	rcall	.-258    	; 0x1ce <LCD_Cursor>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	08 95       	ret

000002d6 <TimerOn>:
 2d6:	8b e0       	ldi	r24, 0x0B	; 11
 2d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2dc:	8d e7       	ldi	r24, 0x7D	; 125
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2fe:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 302:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 306:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_avr_timer_cntcurr>
 30a:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_avr_timer_cntcurr+0x1>
 30e:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <_avr_timer_cntcurr+0x2>
 312:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <_avr_timer_cntcurr+0x3>
 316:	8f b7       	in	r24, 0x3f	; 63
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	8f bf       	out	0x3f, r24	; 63
 31c:	08 95       	ret

0000031e <__vector_13>:
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_avr_timer_cntcurr>
 334:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <_avr_timer_cntcurr+0x1>
 338:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <_avr_timer_cntcurr+0x2>
 33c:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <_avr_timer_cntcurr+0x3>
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	a1 09       	sbc	r26, r1
 344:	b1 09       	sbc	r27, r1
 346:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_avr_timer_cntcurr>
 34a:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_avr_timer_cntcurr+0x1>
 34e:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <_avr_timer_cntcurr+0x2>
 352:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <_avr_timer_cntcurr+0x3>
 356:	89 2b       	or	r24, r25
 358:	8a 2b       	or	r24, r26
 35a:	8b 2b       	or	r24, r27
 35c:	99 f4       	brne	.+38     	; 0x384 <__vector_13+0x66>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <TimerFlag>
 364:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 368:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 36c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 370:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 374:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_avr_timer_cntcurr>
 378:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_avr_timer_cntcurr+0x1>
 37c:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <_avr_timer_cntcurr+0x2>
 380:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <_avr_timer_cntcurr+0x3>
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <TimerSet>:
 396:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 39a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 39e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 3a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 3a6:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <_avr_timer_cntcurr>
 3aa:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <_avr_timer_cntcurr+0x1>
 3ae:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr+0x2>
 3b2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x3>
 3b6:	08 95       	ret

000003b8 <GetKeypadKey>:
 3b8:	8f ee       	ldi	r24, 0xEF	; 239
 3ba:	88 b9       	out	0x08, r24	; 8
 3bc:	00 00       	nop
 3be:	30 9b       	sbis	0x06, 0	; 6
 3c0:	29 c0       	rjmp	.+82     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3c2:	31 9b       	sbis	0x06, 1	; 6
 3c4:	29 c0       	rjmp	.+82     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3c6:	32 9b       	sbis	0x06, 2	; 6
 3c8:	29 c0       	rjmp	.+82     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3ca:	33 9b       	sbis	0x06, 3	; 6
 3cc:	29 c0       	rjmp	.+82     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3ce:	8f ed       	ldi	r24, 0xDF	; 223
 3d0:	88 b9       	out	0x08, r24	; 8
 3d2:	00 00       	nop
 3d4:	30 9b       	sbis	0x06, 0	; 6
 3d6:	26 c0       	rjmp	.+76     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3d8:	31 9b       	sbis	0x06, 1	; 6
 3da:	26 c0       	rjmp	.+76     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3dc:	32 9b       	sbis	0x06, 2	; 6
 3de:	26 c0       	rjmp	.+76     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3e0:	33 9b       	sbis	0x06, 3	; 6
 3e2:	26 c0       	rjmp	.+76     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3e4:	8f eb       	ldi	r24, 0xBF	; 191
 3e6:	88 b9       	out	0x08, r24	; 8
 3e8:	00 00       	nop
 3ea:	30 9b       	sbis	0x06, 0	; 6
 3ec:	23 c0       	rjmp	.+70     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3ee:	31 9b       	sbis	0x06, 1	; 6
 3f0:	23 c0       	rjmp	.+70     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3f2:	32 9b       	sbis	0x06, 2	; 6
 3f4:	23 c0       	rjmp	.+70     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3f6:	33 9b       	sbis	0x06, 3	; 6
 3f8:	23 c0       	rjmp	.+70     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3fa:	8f e7       	ldi	r24, 0x7F	; 127
 3fc:	88 b9       	out	0x08, r24	; 8
 3fe:	00 00       	nop
 400:	30 9b       	sbis	0x06, 0	; 6
 402:	20 c0       	rjmp	.+64     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 404:	31 9b       	sbis	0x06, 1	; 6
 406:	20 c0       	rjmp	.+64     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 408:	32 9b       	sbis	0x06, 2	; 6
 40a:	20 c0       	rjmp	.+64     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 40c:	33 9b       	sbis	0x06, 3	; 6
 40e:	20 c0       	rjmp	.+64     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	08 95       	ret
 414:	81 e3       	ldi	r24, 0x31	; 49
 416:	08 95       	ret
 418:	84 e3       	ldi	r24, 0x34	; 52
 41a:	08 95       	ret
 41c:	87 e3       	ldi	r24, 0x37	; 55
 41e:	08 95       	ret
 420:	8a e2       	ldi	r24, 0x2A	; 42
 422:	08 95       	ret
 424:	82 e3       	ldi	r24, 0x32	; 50
 426:	08 95       	ret
 428:	85 e3       	ldi	r24, 0x35	; 53
 42a:	08 95       	ret
 42c:	88 e3       	ldi	r24, 0x38	; 56
 42e:	08 95       	ret
 430:	80 e3       	ldi	r24, 0x30	; 48
 432:	08 95       	ret
 434:	83 e3       	ldi	r24, 0x33	; 51
 436:	08 95       	ret
 438:	86 e3       	ldi	r24, 0x36	; 54
 43a:	08 95       	ret
 43c:	89 e3       	ldi	r24, 0x39	; 57
 43e:	08 95       	ret
 440:	83 e2       	ldi	r24, 0x23	; 35
 442:	08 95       	ret
 444:	81 e4       	ldi	r24, 0x41	; 65
 446:	08 95       	ret
 448:	82 e4       	ldi	r24, 0x42	; 66
 44a:	08 95       	ret
 44c:	83 e4       	ldi	r24, 0x43	; 67
 44e:	08 95       	ret
 450:	84 e4       	ldi	r24, 0x44	; 68
 452:	08 95       	ret

00000454 <SMTick1>:
 454:	b1 df       	rcall	.-158    	; 0x3b8 <GetKeypadKey>
 456:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <x>
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	08 95       	ret

0000045e <main>:
}

// --------END User defined FSMs-----------------------------------------------
// Implement scheduler code from PES.
int main()
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 d0       	rcall	.+0      	; 0x464 <main+0x6>
 464:	00 d0       	rcall	.+0      	; 0x466 <main+0x8>
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
 46a:	8f ef       	ldi	r24, 0xFF	; 255
 46c:	81 b9       	out	0x01, r24	; 1
 46e:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 470:	84 b9       	out	0x04, r24	; 4
 472:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00; // PORTB set to output, outputs init 0s
 474:	8a b9       	out	0x0a, r24	; 10
 476:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 478:	80 ef       	ldi	r24, 0xF0	; 240
 47a:	87 b9       	out	0x07, r24	; 7
 47c:	8f e0       	ldi	r24, 0x0F	; 15
 47e:	88 b9       	out	0x08, r24	; 8
	LCD_init();
 480:	ae de       	rcall	.-676    	; 0x1de <LCD_init>
 482:	0f 2e       	mov	r0, r31
 484:	f2 e3       	ldi	r31, 0x32	; 50
 486:	ef 2e       	mov	r14, r31
 488:	f0 2d       	mov	r31, r0
 48a:	f1 2c       	mov	r15, r1
 48c:	00 e0       	ldi	r16, 0x00	; 0
 48e:	10 e0       	ldi	r17, 0x00	; 0
 490:	5a e0       	ldi	r21, 0x0A	; 10
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	20 e0       	ldi	r18, 0x00	; 0
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <main+0x44>
	unsigned long int c;
	while (1){
		c = a%b;
		if (c==0){ return b;}
		a = b;
		b = c;
 49a:	e6 2e       	mov	r14, r22
 49c:	f7 2e       	mov	r15, r23
 49e:	08 2f       	mov	r16, r24
 4a0:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD( unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while (1){
		c = a%b;
 4a2:	65 2f       	mov	r22, r21
 4a4:	74 2f       	mov	r23, r20
 4a6:	83 2f       	mov	r24, r19
 4a8:	92 2f       	mov	r25, r18
 4aa:	2e 2d       	mov	r18, r14
 4ac:	3f 2d       	mov	r19, r15
 4ae:	40 2f       	mov	r20, r16
 4b0:	51 2f       	mov	r21, r17
 4b2:	ec d0       	rcall	.+472    	; 0x68c <__udivmodsi4>
 4b4:	5e 2d       	mov	r21, r14
 4b6:	4f 2d       	mov	r20, r15
 4b8:	30 2f       	mov	r19, r16
 4ba:	21 2f       	mov	r18, r17
		if (c==0){ return b;}
 4bc:	61 15       	cp	r22, r1
 4be:	71 05       	cpc	r23, r1
 4c0:	81 05       	cpc	r24, r1
 4c2:	91 05       	cpc	r25, r1
 4c4:	51 f7       	brne	.-44     	; 0x49a <main+0x3c>
	tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
	
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 4c6:	6a e0       	ldi	r22, 0x0A	; 10
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	2e 2d       	mov	r18, r14
 4d0:	3f 2d       	mov	r19, r15
 4d2:	40 2f       	mov	r20, r16
 4d4:	51 2f       	mov	r21, r17
 4d6:	da d0       	rcall	.+436    	; 0x68c <__udivmodsi4>
 4d8:	49 01       	movw	r8, r18
 4da:	5a 01       	movw	r10, r20
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 4dc:	62 e3       	ldi	r22, 0x32	; 50
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	2e 2d       	mov	r18, r14
 4e6:	3f 2d       	mov	r19, r15
 4e8:	40 2f       	mov	r20, r16
 4ea:	51 2f       	mov	r21, r17
 4ec:	cf d0       	rcall	.+414    	; 0x68c <__udivmodsi4>
	//Declare an array of tasks
	static task task1, task2;
	task *tasks[] = {&task1, &task2};
 4ee:	af e0       	ldi	r26, 0x0F	; 15
 4f0:	b1 e0       	ldi	r27, 0x01	; 1
 4f2:	ba 83       	std	Y+2, r27	; 0x02
 4f4:	a9 83       	std	Y+1, r26	; 0x01
 4f6:	e4 e0       	ldi	r30, 0x04	; 4
 4f8:	f1 e0       	ldi	r31, 0x01	; 1
 4fa:	fc 83       	std	Y+4, r31	; 0x04
 4fc:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof (tasks)/ sizeof (task*);
	// Task 1
	task1.state = -1; //Task initial state.
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	8c 93       	st	X, r24
	task1.period = SMTick1_period; //Task Period.
 502:	11 96       	adiw	r26, 0x01	; 1
 504:	8d 92       	st	X+, r8
 506:	9d 92       	st	X+, r9
 508:	ad 92       	st	X+, r10
 50a:	bc 92       	st	X, r11
 50c:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = SMTick1_period; //Task current elapsed time.
 50e:	15 96       	adiw	r26, 0x05	; 5
 510:	8d 92       	st	X+, r8
 512:	9d 92       	st	X+, r9
 514:	ad 92       	st	X+, r10
 516:	bc 92       	st	X, r11
 518:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &SMTick1; //Function pointer for the tick.
 51a:	6a e2       	ldi	r22, 0x2A	; 42
 51c:	72 e0       	ldi	r23, 0x02	; 2
 51e:	1a 96       	adiw	r26, 0x0a	; 10
 520:	7c 93       	st	X, r23
 522:	6e 93       	st	-X, r22
 524:	19 97       	sbiw	r26, 0x09	; 9
	// Task 2
	task2.state = -1; //Task initial state.
 526:	80 83       	st	Z, r24
	task2.period = SMTick2_period; //Task Period.
 528:	21 83       	std	Z+1, r18	; 0x01
 52a:	32 83       	std	Z+2, r19	; 0x02
 52c:	43 83       	std	Z+3, r20	; 0x03
 52e:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = SMTick2_period; //Task current elapsed time.
 530:	25 83       	std	Z+5, r18	; 0x05
 532:	36 83       	std	Z+6, r19	; 0x06
 534:	47 83       	std	Z+7, r20	; 0x07
 536:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &SMTick2; //Function pointer for the tick.
 538:	87 e0       	ldi	r24, 0x07	; 7
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	92 87       	std	Z+10, r25	; 0x0a
 53e:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(GCD);
 540:	6e 2d       	mov	r22, r14
 542:	7f 2d       	mov	r23, r15
 544:	80 2f       	mov	r24, r16
 546:	91 2f       	mov	r25, r17
	TimerOn();
 548:	26 df       	rcall	.-436    	; 0x396 <TimerSet>
 54a:	c5 de       	rcall	.-630    	; 0x2d6 <TimerOn>
			case 'B': PORTB = 0x0B;break;
			case 'C': PORTB = 0x0C;break;
			case 'D': PORTB = 0x0D;break;
			case '*': PORTB = 0x0E;break;
			case '0': PORTB = 0x00;break;
			case '#': PORTB = 0x0F;break;
 54c:	0f 2e       	mov	r0, r31
 54e:	ff e0       	ldi	r31, 0x0F	; 15
 550:	2f 2e       	mov	r2, r31
 552:	f0 2d       	mov	r31, r0
			case '9': PORTB = 0x09;break;
			case 'A': PORTB = 0x0A;break;
			case 'B': PORTB = 0x0B;break;
			case 'C': PORTB = 0x0C;break;
			case 'D': PORTB = 0x0D;break;
			case '*': PORTB = 0x0E;break;
 554:	0f 2e       	mov	r0, r31
 556:	fe e0       	ldi	r31, 0x0E	; 14
 558:	3f 2e       	mov	r3, r31
 55a:	f0 2d       	mov	r31, r0
			case '8': PORTB = 0x08;break;
			case '9': PORTB = 0x09;break;
			case 'A': PORTB = 0x0A;break;
			case 'B': PORTB = 0x0B;break;
			case 'C': PORTB = 0x0C;break;
			case 'D': PORTB = 0x0D;break;
 55c:	0f 2e       	mov	r0, r31
 55e:	fd e0       	ldi	r31, 0x0D	; 13
 560:	4f 2e       	mov	r4, r31
 562:	f0 2d       	mov	r31, r0
			case '7': PORTB = 0x07;break;
			case '8': PORTB = 0x08;break;
			case '9': PORTB = 0x09;break;
			case 'A': PORTB = 0x0A;break;
			case 'B': PORTB = 0x0B;break;
			case 'C': PORTB = 0x0C;break;
 564:	0f 2e       	mov	r0, r31
 566:	fc e0       	ldi	r31, 0x0C	; 12
 568:	5f 2e       	mov	r5, r31
 56a:	f0 2d       	mov	r31, r0
			case '6': PORTB = 0x06;break;
			case '7': PORTB = 0x07;break;
			case '8': PORTB = 0x08;break;
			case '9': PORTB = 0x09;break;
			case 'A': PORTB = 0x0A;break;
			case 'B': PORTB = 0x0B;break;
 56c:	0f 2e       	mov	r0, r31
 56e:	fb e0       	ldi	r31, 0x0B	; 11
 570:	6f 2e       	mov	r6, r31
 572:	f0 2d       	mov	r31, r0
			case '5': PORTB = 0x05;break;
			case '6': PORTB = 0x06;break;
			case '7': PORTB = 0x07;break;
			case '8': PORTB = 0x08;break;
			case '9': PORTB = 0x09;break;
			case 'A': PORTB = 0x0A;break;
 574:	0f 2e       	mov	r0, r31
 576:	fa e0       	ldi	r31, 0x0A	; 10
 578:	7f 2e       	mov	r7, r31
 57a:	f0 2d       	mov	r31, r0
			case '4': PORTB = 0x04;break;
			case '5': PORTB = 0x05;break;
			case '6': PORTB = 0x06;break;
			case '7': PORTB = 0x07;break;
			case '8': PORTB = 0x08;break;
			case '9': PORTB = 0x09;break;
 57c:	0f 2e       	mov	r0, r31
 57e:	f9 e0       	ldi	r31, 0x09	; 9
 580:	8f 2e       	mov	r8, r31
 582:	f0 2d       	mov	r31, r0
			case '3': PORTB = 0x03;break;
			case '4': PORTB = 0x04;break;
			case '5': PORTB = 0x05;break;
			case '6': PORTB = 0x06;break;
			case '7': PORTB = 0x07;break;
			case '8': PORTB = 0x08;break;
 584:	68 94       	set
 586:	99 24       	eor	r9, r9
 588:	93 f8       	bld	r9, 3
			case '2': PORTB = 0x02;break;
			case '3': PORTB = 0x03;break;
			case '4': PORTB = 0x04;break;
			case '5': PORTB = 0x05;break;
			case '6': PORTB = 0x06;break;
			case '7': PORTB = 0x07;break;
 58a:	0f 2e       	mov	r0, r31
 58c:	f7 e0       	ldi	r31, 0x07	; 7
 58e:	af 2e       	mov	r10, r31
 590:	f0 2d       	mov	r31, r0
			case '1': PORTB = 0x01;break;
			case '2': PORTB = 0x02;break;
			case '3': PORTB = 0x03;break;
			case '4': PORTB = 0x04;break;
			case '5': PORTB = 0x05;break;
			case '6': PORTB = 0x06;break;
 592:	0f 2e       	mov	r0, r31
 594:	f6 e0       	ldi	r31, 0x06	; 6
 596:	bf 2e       	mov	r11, r31
 598:	f0 2d       	mov	r31, r0
 59a:	6e 01       	movw	r12, r28
 59c:	85 e0       	ldi	r24, 0x05	; 5
 59e:	c8 0e       	add	r12, r24
	TimerOn();
	unsigned short i; // Scheduler for-loop iterator
	
	
	while (1) {
		x = GetKeypadKey();
 5a0:	d1 1c       	adc	r13, r1
 5a2:	0a df       	rcall	.-492    	; 0x3b8 <GetKeypadKey>
 5a4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <x>
		switch(x){
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	85 34       	cpi	r24, 0x45	; 69
 5ac:	91 05       	cpc	r25, r1
 5ae:	60 f5       	brcc	.+88     	; 0x608 <main+0x1aa>
 5b0:	fc 01       	movw	r30, r24
 5b2:	e8 59       	subi	r30, 0x98	; 152
 5b4:	ff 4f       	sbci	r31, 0xFF	; 255
 5b6:	8c c0       	rjmp	.+280    	; 0x6d0 <__tablejump2__>
			case '\0' : PORTB = 0x1F;break;
 5b8:	8f e1       	ldi	r24, 0x1F	; 31
 5ba:	85 b9       	out	0x05, r24	; 5
 5bc:	63 c0       	rjmp	.+198    	; 0x684 <main+0x226>
			case '1': PORTB = 0x01;break;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	85 b9       	out	0x05, r24	; 5
 5c2:	60 c0       	rjmp	.+192    	; 0x684 <main+0x226>
			case '2': PORTB = 0x02;break;
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	85 b9       	out	0x05, r24	; 5
 5c8:	5d c0       	rjmp	.+186    	; 0x684 <main+0x226>
			case '3': PORTB = 0x03;break;
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	85 b9       	out	0x05, r24	; 5
 5ce:	5a c0       	rjmp	.+180    	; 0x684 <main+0x226>
			case '4': PORTB = 0x04;break;
 5d0:	94 e0       	ldi	r25, 0x04	; 4
 5d2:	95 b9       	out	0x05, r25	; 5
 5d4:	57 c0       	rjmp	.+174    	; 0x684 <main+0x226>
			case '5': PORTB = 0x05;break;
 5d6:	a5 e0       	ldi	r26, 0x05	; 5
 5d8:	a5 b9       	out	0x05, r26	; 5
 5da:	54 c0       	rjmp	.+168    	; 0x684 <main+0x226>
			case '6': PORTB = 0x06;break;
 5dc:	b5 b8       	out	0x05, r11	; 5
 5de:	52 c0       	rjmp	.+164    	; 0x684 <main+0x226>
			case '7': PORTB = 0x07;break;
 5e0:	a5 b8       	out	0x05, r10	; 5
 5e2:	50 c0       	rjmp	.+160    	; 0x684 <main+0x226>
			case '8': PORTB = 0x08;break;
 5e4:	95 b8       	out	0x05, r9	; 5
 5e6:	4e c0       	rjmp	.+156    	; 0x684 <main+0x226>
			case '9': PORTB = 0x09;break;
 5e8:	85 b8       	out	0x05, r8	; 5
 5ea:	4c c0       	rjmp	.+152    	; 0x684 <main+0x226>
			case 'A': PORTB = 0x0A;break;
 5ec:	75 b8       	out	0x05, r7	; 5
 5ee:	4a c0       	rjmp	.+148    	; 0x684 <main+0x226>
			case 'B': PORTB = 0x0B;break;
 5f0:	65 b8       	out	0x05, r6	; 5
 5f2:	48 c0       	rjmp	.+144    	; 0x684 <main+0x226>
			case 'C': PORTB = 0x0C;break;
 5f4:	55 b8       	out	0x05, r5	; 5
 5f6:	46 c0       	rjmp	.+140    	; 0x684 <main+0x226>
			case 'D': PORTB = 0x0D;break;
 5f8:	45 b8       	out	0x05, r4	; 5
 5fa:	44 c0       	rjmp	.+136    	; 0x684 <main+0x226>
			case '*': PORTB = 0x0E;break;
 5fc:	35 b8       	out	0x05, r3	; 5
 5fe:	42 c0       	rjmp	.+132    	; 0x684 <main+0x226>
			case '0': PORTB = 0x00;break;
 600:	15 b8       	out	0x05, r1	; 5
 602:	40 c0       	rjmp	.+128    	; 0x684 <main+0x226>
			case '#': PORTB = 0x0F;break;
 604:	25 b8       	out	0x05, r2	; 5
 606:	3e c0       	rjmp	.+124    	; 0x684 <main+0x226>
			default: PORTB = 0x00; break;		
 608:	15 b8       	out	0x05, r1	; 5
 60a:	3c c0       	rjmp	.+120    	; 0x684 <main+0x226>
		}
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 60c:	f7 01       	movw	r30, r14
 60e:	01 91       	ld	r16, Z+
 610:	11 91       	ld	r17, Z+
 612:	7f 01       	movw	r14, r30
 614:	d8 01       	movw	r26, r16
 616:	15 96       	adiw	r26, 0x05	; 5
 618:	4d 91       	ld	r20, X+
 61a:	5d 91       	ld	r21, X+
 61c:	6d 91       	ld	r22, X+
 61e:	7c 91       	ld	r23, X
 620:	18 97       	sbiw	r26, 0x08	; 8
 622:	11 96       	adiw	r26, 0x01	; 1
 624:	8d 91       	ld	r24, X+
 626:	9d 91       	ld	r25, X+
 628:	0d 90       	ld	r0, X+
 62a:	bc 91       	ld	r27, X
 62c:	a0 2d       	mov	r26, r0
 62e:	48 17       	cp	r20, r24
 630:	59 07       	cpc	r21, r25
 632:	6a 07       	cpc	r22, r26
 634:	7b 07       	cpc	r23, r27
 636:	81 f4       	brne	.+32     	; 0x658 <main+0x1fa>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 638:	f8 01       	movw	r30, r16
 63a:	80 81       	ld	r24, Z
 63c:	01 84       	ldd	r0, Z+9	; 0x09
 63e:	f2 85       	ldd	r31, Z+10	; 0x0a
 640:	e0 2d       	mov	r30, r0
 642:	08 2e       	mov	r0, r24
 644:	00 0c       	add	r0, r0
 646:	99 0b       	sbc	r25, r25
 648:	09 95       	icall
 64a:	d8 01       	movw	r26, r16
 64c:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 64e:	f8 01       	movw	r30, r16
 650:	15 82       	std	Z+5, r1	; 0x05
 652:	16 82       	std	Z+6, r1	; 0x06
 654:	17 82       	std	Z+7, r1	; 0x07
 656:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 658:	f8 01       	movw	r30, r16
 65a:	85 81       	ldd	r24, Z+5	; 0x05
 65c:	96 81       	ldd	r25, Z+6	; 0x06
 65e:	a7 81       	ldd	r26, Z+7	; 0x07
 660:	b0 85       	ldd	r27, Z+8	; 0x08
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	a1 1d       	adc	r26, r1
 666:	b1 1d       	adc	r27, r1
 668:	85 83       	std	Z+5, r24	; 0x05
 66a:	96 83       	std	Z+6, r25	; 0x06
 66c:	a7 83       	std	Z+7, r26	; 0x07
 66e:	b0 87       	std	Z+8, r27	; 0x08
			case '0': PORTB = 0x00;break;
			case '#': PORTB = 0x0F;break;
			default: PORTB = 0x00; break;		
		}
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 670:	ec 14       	cp	r14, r12
 672:	fd 04       	cpc	r15, r13
 674:	59 f6       	brne	.-106    	; 0x60c <main+0x1ae>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while (!TimerFlag);
 676:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <TimerFlag>
 67a:	88 23       	and	r24, r24
 67c:	e1 f3       	breq	.-8      	; 0x676 <main+0x218>
		TimerFlag = 0;
 67e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <TimerFlag>
	}
 682:	8f cf       	rjmp	.-226    	; 0x5a2 <main+0x144>
 684:	ce 01       	movw	r24, r28
 686:	01 96       	adiw	r24, 0x01	; 1
 688:	7c 01       	movw	r14, r24
 68a:	c0 cf       	rjmp	.-128    	; 0x60c <main+0x1ae>

0000068c <__udivmodsi4>:
 68c:	a1 e2       	ldi	r26, 0x21	; 33
 68e:	1a 2e       	mov	r1, r26
 690:	aa 1b       	sub	r26, r26
 692:	bb 1b       	sub	r27, r27
 694:	fd 01       	movw	r30, r26
 696:	0d c0       	rjmp	.+26     	; 0x6b2 <__udivmodsi4_ep>

00000698 <__udivmodsi4_loop>:
 698:	aa 1f       	adc	r26, r26
 69a:	bb 1f       	adc	r27, r27
 69c:	ee 1f       	adc	r30, r30
 69e:	ff 1f       	adc	r31, r31
 6a0:	a2 17       	cp	r26, r18
 6a2:	b3 07       	cpc	r27, r19
 6a4:	e4 07       	cpc	r30, r20
 6a6:	f5 07       	cpc	r31, r21
 6a8:	20 f0       	brcs	.+8      	; 0x6b2 <__udivmodsi4_ep>
 6aa:	a2 1b       	sub	r26, r18
 6ac:	b3 0b       	sbc	r27, r19
 6ae:	e4 0b       	sbc	r30, r20
 6b0:	f5 0b       	sbc	r31, r21

000006b2 <__udivmodsi4_ep>:
 6b2:	66 1f       	adc	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	1a 94       	dec	r1
 6bc:	69 f7       	brne	.-38     	; 0x698 <__udivmodsi4_loop>
 6be:	60 95       	com	r22
 6c0:	70 95       	com	r23
 6c2:	80 95       	com	r24
 6c4:	90 95       	com	r25
 6c6:	9b 01       	movw	r18, r22
 6c8:	ac 01       	movw	r20, r24
 6ca:	bd 01       	movw	r22, r26
 6cc:	cf 01       	movw	r24, r30
 6ce:	08 95       	ret

000006d0 <__tablejump2__>:
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	00 24       	eor	r0, r0
 6d6:	00 1c       	adc	r0, r0
 6d8:	0b be       	out	0x3b, r0	; 59
 6da:	07 90       	elpm	r0, Z+
 6dc:	f6 91       	elpm	r31, Z
 6de:	e0 2d       	mov	r30, r0
 6e0:	09 94       	ijmp

000006e2 <_exit>:
 6e2:	f8 94       	cli

000006e4 <__stop_program>:
 6e4:	ff cf       	rjmp	.-2      	; 0x6e4 <__stop_program>

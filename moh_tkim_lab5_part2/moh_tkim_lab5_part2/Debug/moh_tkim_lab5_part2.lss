
moh_tkim_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bc  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086b  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ff  00000000  00000000  0000166f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048e  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002005  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f8 d0       	rcall	.+496    	; 0x2b4 <main>
  c4:	13 c1       	rjmp	.+550    	; 0x2ec <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
  fc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 100:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 104:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

//In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
 122:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 126:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 13c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 140:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 144:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0)
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <TimerFlag>
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
	if(_avr_timer_cntcurr == 0)
	{
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 16a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 172:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

//Set TimerISR() to tick every M ms
void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <_avr_timer_cntcurr>
 19c:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <Tick>:
unsigned char button = 0x00;
unsigned char cnt = 0x00;

void Tick()
{
	switch(state)
 1aa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	81 f1       	breq	.+96     	; 0x212 <Tick+0x68>
 1b2:	28 f4       	brcc	.+10     	; 0x1be <Tick+0x14>
 1b4:	88 23       	and	r24, r24
 1b6:	51 f0       	breq	.+20     	; 0x1cc <Tick+0x22>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	a1 f0       	breq	.+40     	; 0x1e4 <Tick+0x3a>
 1bc:	52 c0       	rjmp	.+164    	; 0x262 <Tick+0xb8>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <Tick+0x1a>
 1c2:	40 c0       	rjmp	.+128    	; 0x244 <Tick+0x9a>
 1c4:	84 30       	cpi	r24, 0x04	; 4
 1c6:	09 f4       	brne	.+2      	; 0x1ca <Tick+0x20>
 1c8:	45 c0       	rjmp	.+138    	; 0x254 <Tick+0xaa>
 1ca:	4b c0       	rjmp	.+150    	; 0x262 <Tick+0xb8>
	{//state transition
		case Init:
		if(button)
 1cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button>
 1d0:	81 11       	cpse	r24, r1
 1d2:	6f c0       	rjmp	.+222    	; 0x2b2 <Tick+0x108>
		{
			state = Init;
		}
		else
		{
			state = next_led;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
			cnt = 0x00;
 1da:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			tmpB = 0x01;
 1de:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpB>
 1e2:	64 c0       	rjmp	.+200    	; 0x2ac <Tick+0x102>
		}
		break;
		
		case next_led:
		if((tmpB == 0x04) && (cnt == 0x0A))
 1e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tmpB>
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	59 f4       	brne	.+22     	; 0x202 <Tick+0x58>
 1ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1f0:	8a 30       	cpi	r24, 0x0A	; 10
 1f2:	39 f4       	brne	.+14     	; 0x202 <Tick+0x58>
		{
			state = prev_led;
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
			tmpB = tmpB >> 1;
 1fa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpB>
			cnt++;
		}
		break;
		
		case prev_led:
		if(cnt == 0x0A)
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	51 c0       	rjmp	.+162    	; 0x2a4 <Tick+0xfa>
		{
			state = prev_led;
			tmpB = tmpB >> 1;
			cnt = 0;
		}
		else if(button)
 202:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button>
 206:	88 23       	and	r24, r24
 208:	89 f1       	breq	.+98     	; 0x26c <Tick+0xc2>
		{
			state = stay_pr;
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
 210:	08 95       	ret
			state = next_led;
		}
		break;
		
		case prev_led:
		if((tmpB == 0x01) && (cnt == 0x0A))
 212:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tmpB>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	69 f4       	brne	.+26     	; 0x234 <Tick+0x8a>
 21a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 21e:	8a 30       	cpi	r24, 0x0A	; 10
 220:	49 f4       	brne	.+18     	; 0x234 <Tick+0x8a>
		{
			state = next_led;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
			tmpB = tmpB << 1;
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpB>
			cnt = 0;
 22e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 232:	3c c0       	rjmp	.+120    	; 0x2ac <Tick+0x102>
		}
		else if(button)
 234:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button>
 238:	88 23       	and	r24, r24
 23a:	41 f1       	breq	.+80     	; 0x28c <Tick+0xe2>
		{
			state = stay_pr;
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
 242:	08 95       	ret
			state = prev_led;
		}
		break;
		
		case stay_pr:
		if(!button)
 244:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button>
 248:	81 11       	cpse	r24, r1
 24a:	33 c0       	rjmp	.+102    	; 0x2b2 <Tick+0x108>
		{
			state = released;
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
 252:	08 95       	ret
			break;
		}
		break;
		
		case released:
		if(button)
 254:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button>
 258:	88 23       	and	r24, r24
 25a:	59 f1       	breq	.+86     	; 0x2b2 <Tick+0x108>
		{
			state = Init;
 25c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state>
 260:	08 95       	ret
		
		default:
		break;
	}
	
	switch(state)
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	19 f0       	breq	.+6      	; 0x26c <Tick+0xc2>
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	89 f0       	breq	.+34     	; 0x28c <Tick+0xe2>
 26a:	08 95       	ret
	{//state action
		case Init:
		break;
		
		case next_led:
		if(cnt == 0x0A)
 26c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 270:	8a 30       	cpi	r24, 0x0A	; 10
 272:	41 f4       	brne	.+16     	; 0x284 <Tick+0xda>
		{
			tmpB = tmpB << 1;
 274:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tmpB>
 278:	88 0f       	add	r24, r24
 27a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpB>
			cnt = 0;
 27e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 282:	08 95       	ret
		}
		else
		{
			cnt++;
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 28a:	08 95       	ret
		}
		break;
		
		case prev_led:
		if(cnt == 0x0A)
 28c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 290:	8a 30       	cpi	r24, 0x0A	; 10
 292:	41 f4       	brne	.+16     	; 0x2a4 <Tick+0xfa>
		{
			tmpB = tmpB >> 1;
 294:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tmpB>
 298:	86 95       	lsr	r24
 29a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tmpB>
			cnt = 0;
 29e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 2a2:	08 95       	ret
		}
		else
		{
			cnt++;
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		break;
		
		default:
		break;
	}
}
 2aa:	08 95       	ret
	{//state action
		case Init:
		break;
		
		case next_led:
		if(cnt == 0x0A)
 2ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2b0:	e9 cf       	rjmp	.-46     	; 0x284 <Tick+0xda>
 2b2:	08 95       	ret

000002b4 <main>:


void main()
{
	
	DDRA = 0x00;	DDRB = 0xFF;
 2b4:	11 b8       	out	0x01, r1	; 1
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	84 b9       	out	0x04, r24	; 4
	PORTA = 0xFF;	PORTB = 0x00;
 2ba:	82 b9       	out	0x02, r24	; 2
 2bc:	15 b8       	out	0x05, r1	; 5
	
	TimerSet(30);
 2be:	6e e1       	ldi	r22, 0x1E	; 30
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	60 df       	rcall	.-320    	; 0x188 <TimerSet>
	TimerOn();
 2c8:	ff de       	rcall	.-514    	; 0xc8 <TimerOn>
 2ca:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state>
	
	state = Init;
 2ce:	80 b1       	in	r24, 0x00	; 0

	while (1)
	{
		button = ~PINA;
 2d0:	80 95       	com	r24
 2d2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button>
		Tick();
 2d6:	69 df       	rcall	.-302    	; 0x1aa <Tick>
 2d8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TimerFlag>
		while(!TimerFlag){}
 2dc:	88 23       	and	r24, r24
 2de:	e1 f3       	breq	.-8      	; 0x2d8 <main+0x24>
 2e0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TimerFlag>
			TimerFlag = 0;
 2e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tmpB>
		PORTB = tmpB;
 2e8:	85 b9       	out	0x05, r24	; 5
 2ea:	f1 cf       	rjmp	.-30     	; 0x2ce <main+0x1a>

000002ec <_exit>:
	}
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>


moh_matrixlab_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003ca  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800106  00800106  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c08  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000991  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050a  00000000  00000000  00001add  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000571  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c3  00000000  00000000  00002669  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002a2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b1 c0       	rjmp	.+354    	; 0x198 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fb d0       	rcall	.+502    	; 0x2ba <main>
  c4:	80 c1       	rjmp	.+768    	; 0x3c6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SM1_Tick>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	20 b1       	in	r18, 0x00	; 0
  ca:	20 95       	com	r18
  cc:	23 70       	andi	r18, 0x03	; 3
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	91 05       	cpc	r25, r1
  d2:	51 f0       	breq	.+20     	; 0xe8 <SM1_Tick+0x20>
  d4:	1c f4       	brge	.+6      	; 0xdc <SM1_Tick+0x14>
  d6:	89 2b       	or	r24, r25
  d8:	91 f1       	breq	.+100    	; 0x13e <SM1_Tick+0x76>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SM1_Tick+0x3e>
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	91 05       	cpc	r25, r1
  e0:	41 f0       	breq	.+16     	; 0xf2 <SM1_Tick+0x2a>
  e2:	03 97       	sbiw	r24, 0x03	; 3
  e4:	59 f0       	breq	.+22     	; 0xfc <SM1_Tick+0x34>
  e6:	0f c0       	rjmp	.+30     	; 0x106 <SM1_Tick+0x3e>
  e8:	21 30       	cpi	r18, 0x01	; 1
  ea:	a9 f0       	breq	.+42     	; 0x116 <SM1_Tick+0x4e>
  ec:	22 30       	cpi	r18, 0x02	; 2
  ee:	79 f5       	brne	.+94     	; 0x14e <SM1_Tick+0x86>
  f0:	1c c0       	rjmp	.+56     	; 0x12a <SM1_Tick+0x62>
  f2:	21 30       	cpi	r18, 0x01	; 1
  f4:	81 f0       	breq	.+32     	; 0x116 <SM1_Tick+0x4e>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret
  fc:	22 30       	cpi	r18, 0x02	; 2
  fe:	a9 f0       	breq	.+42     	; 0x12a <SM1_Tick+0x62>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	08 95       	ret
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 10c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <column_sel>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 11a:	80 38       	cpi	r24, 0x80	; 128
 11c:	99 f0       	breq	.+38     	; 0x144 <SM1_Tick+0x7c>
 11e:	88 0f       	add	r24, r24
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	08 95       	ret
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	61 f0       	breq	.+24     	; 0x14a <SM1_Tick+0x82>
 132:	86 95       	lsr	r24
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret

00000150 <TimerOn>:
 150:	8b e0       	ldi	r24, 0x0B	; 11
 152:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 156:	8d e7       	ldi	r24, 0x7D	; 125
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 15e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 168:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 16c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 174:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 178:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 17c:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 180:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr>
 184:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x1>
 188:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <_avr_timer_cntcurr+0x2>
 18c:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <_avr_timer_cntcurr+0x3>
 190:	8f b7       	in	r24, 0x3f	; 63
 192:	80 68       	ori	r24, 0x80	; 128
 194:	8f bf       	out	0x3f, r24	; 63
 196:	08 95       	ret

00000198 <__vector_13>:
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_avr_timer_cntcurr>
 1ae:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_avr_timer_cntcurr+0x1>
 1b2:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <_avr_timer_cntcurr+0x2>
 1b6:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <_avr_timer_cntcurr+0x3>
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	a1 09       	sbc	r26, r1
 1be:	b1 09       	sbc	r27, r1
 1c0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr>
 1c4:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x1>
 1c8:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <_avr_timer_cntcurr+0x2>
 1cc:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <_avr_timer_cntcurr+0x3>
 1d0:	89 2b       	or	r24, r25
 1d2:	8a 2b       	or	r24, r26
 1d4:	8b 2b       	or	r24, r27
 1d6:	99 f4       	brne	.+38     	; 0x1fe <__vector_13+0x66>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <TimerFlag>
 1de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 1e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 1e6:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 1ea:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 1ee:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr>
 1f2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x1>
 1f6:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <_avr_timer_cntcurr+0x2>
 1fa:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <_avr_timer_cntcurr+0x3>
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <TimerSet>:
 210:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 214:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 218:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 21c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
 220:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <_avr_timer_cntcurr>
 224:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <_avr_timer_cntcurr+0x1>
 228:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_avr_timer_cntcurr+0x2>
 22c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_avr_timer_cntcurr+0x3>
 230:	08 95       	ret

00000232 <transmit_data>:
static unsigned char column_sel = 0x00;//grounds column to display pattern

void transmit_data(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTB = 0x08;
 236:	58 e0       	ldi	r21, 0x08	; 8
		PORTB |= ((data >> i) & 0x01);
 238:	e8 2f       	mov	r30, r24
 23a:	f0 e0       	ldi	r31, 0x00	; 0
void transmit_data(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
	{
		PORTB = 0x08;
 23c:	55 b9       	out	0x05, r21	; 5
		PORTB |= ((data >> i) & 0x01);
 23e:	45 b1       	in	r20, 0x05	; 5
 240:	bf 01       	movw	r22, r30
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <transmit_data+0x18>
 246:	75 95       	asr	r23
 248:	67 95       	ror	r22
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <transmit_data+0x14>
 24e:	96 2f       	mov	r25, r22
 250:	91 70       	andi	r25, 0x01	; 1
 252:	94 2b       	or	r25, r20
 254:	95 b9       	out	0x05, r25	; 5
		PORTB |= 0x02;
 256:	29 9a       	sbi	0x05, 1	; 5
static unsigned char column_sel = 0x00;//grounds column to display pattern

void transmit_data(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	28 30       	cpi	r18, 0x08	; 8
 25e:	31 05       	cpc	r19, r1
 260:	69 f7       	brne	.-38     	; 0x23c <transmit_data+0xa>
	{
		PORTB = 0x08;
		PORTB |= ((data >> i) & 0x01);
		PORTB |= 0x02;
	}
	PORTB |= 0x04;
 262:	2a 9a       	sbi	0x05, 2	; 5
	PORTB = 0x00;
 264:	15 b8       	out	0x05, r1	; 5
 266:	08 95       	ret

00000268 <transmit_data2>:
}
void transmit_data2(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTC = 0x08;
 26c:	58 e0       	ldi	r21, 0x08	; 8
		PORTC |= ((data >> i) & 0x01);
 26e:	e8 2f       	mov	r30, r24
 270:	f0 e0       	ldi	r31, 0x00	; 0
void transmit_data2(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
	{
		PORTC = 0x08;
 272:	58 b9       	out	0x08, r21	; 8
		PORTC |= ((data >> i) & 0x01);
 274:	48 b1       	in	r20, 0x08	; 8
 276:	bf 01       	movw	r22, r30
 278:	02 2e       	mov	r0, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <transmit_data2+0x18>
 27c:	75 95       	asr	r23
 27e:	67 95       	ror	r22
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <transmit_data2+0x14>
 284:	96 2f       	mov	r25, r22
 286:	91 70       	andi	r25, 0x01	; 1
 288:	94 2b       	or	r25, r20
 28a:	98 b9       	out	0x08, r25	; 8
		PORTC |= 0x02;
 28c:	41 9a       	sbi	0x08, 1	; 8
	PORTB = 0x00;
}
void transmit_data2(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
 28e:	2f 5f       	subi	r18, 0xFF	; 255
 290:	3f 4f       	sbci	r19, 0xFF	; 255
 292:	28 30       	cpi	r18, 0x08	; 8
 294:	31 05       	cpc	r19, r1
 296:	69 f7       	brne	.-38     	; 0x272 <transmit_data2+0xa>
	{
		PORTC = 0x08;
		PORTC |= ((data >> i) & 0x01);
		PORTC |= 0x02;
	}
	PORTC |= 0x04;
 298:	42 9a       	sbi	0x08, 2	; 8
	PORTC = 0x00;
 29a:	18 b8       	out	0x08, r1	; 8
 29c:	08 95       	ret

0000029e <display>:
}
enum display_States{DISPLAY};
int display(int state){
 29e:	cf 93       	push	r28
 2a0:	c8 e0       	ldi	r28, 0x08	; 8
	//===============actions================
	switch(state){
		case DISPLAY:
		for(j = 0; j <= 7; j++)
		{
			transmit_data(column_sel);
 2a2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <column_sel>
 2a6:	c5 df       	rcall	.-118    	; 0x232 <transmit_data>
			transmit_data2(column_val);
 2a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ac:	dd df       	rcall	.-70     	; 0x268 <transmit_data2>
 2ae:	c1 50       	subi	r28, 0x01	; 1
		break;
	}
	//===============actions================
	switch(state){
		case DISPLAY:
		for(j = 0; j <= 7; j++)
 2b0:	c1 f7       	brne	.-16     	; 0x2a2 <display+0x4>
		
		default:
		break;
	}
	return state;
}
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <main>:
	
	return state;
}

int main(void)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <main+0x6>
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <main+0x8>
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 2c6:	11 b8       	out	0x01, r1	; 1
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 2cc:	87 b9       	out	0x07, r24	; 7
 2ce:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
 2d0:	84 b9       	out	0x04, r24	; 4
 2d2:	15 b8       	out	0x05, r1	; 5
	unsigned long GCD = findGCD(SM1_Tick_calc, display_calc);
	unsigned long int SM1_Tick1_period = SM1_Tick_calc/GCD;
	unsigned long int display_period = display_calc/GCD;
	
	static task task1, task2;
	task *tasks[] = {&task1, &task2};
 2d4:	a1 e1       	ldi	r26, 0x11	; 17
 2d6:	b1 e0       	ldi	r27, 0x01	; 1
 2d8:	ba 83       	std	Y+2, r27	; 0x02
 2da:	a9 83       	std	Y+1, r26	; 0x01
 2dc:	e6 e0       	ldi	r30, 0x06	; 6
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	fc 83       	std	Y+4, r31	; 0x04
 2e2:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	task1.state = -1;
 2e4:	8c 93       	st	X, r24
	task1.period = display_period;
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	11 96       	adiw	r26, 0x01	; 1
 2f0:	4d 93       	st	X+, r20
 2f2:	5d 93       	st	X+, r21
 2f4:	6d 93       	st	X+, r22
 2f6:	7c 93       	st	X, r23
 2f8:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = display_period;
 2fa:	15 96       	adiw	r26, 0x05	; 5
 2fc:	4d 93       	st	X+, r20
 2fe:	5d 93       	st	X+, r21
 300:	6d 93       	st	X+, r22
 302:	7c 93       	st	X, r23
 304:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &display;
 306:	2f e4       	ldi	r18, 0x4F	; 79
 308:	31 e0       	ldi	r19, 0x01	; 1
 30a:	1a 96       	adiw	r26, 0x0a	; 10
 30c:	3c 93       	st	X, r19
 30e:	2e 93       	st	-X, r18
 310:	19 97       	sbiw	r26, 0x09	; 9
	
	
	task2.state = -1;
 312:	80 83       	st	Z, r24
	task2.period = SM1_Tick1_period;
 314:	82 e3       	ldi	r24, 0x32	; 50
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	a0 e0       	ldi	r26, 0x00	; 0
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	81 83       	std	Z+1, r24	; 0x01
 31e:	92 83       	std	Z+2, r25	; 0x02
 320:	a3 83       	std	Z+3, r26	; 0x03
 322:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime = SM1_Tick1_period;
 324:	85 83       	std	Z+5, r24	; 0x05
 326:	96 83       	std	Z+6, r25	; 0x06
 328:	a7 83       	std	Z+7, r26	; 0x07
 32a:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &SM1_Tick;
 32c:	84 e6       	ldi	r24, 0x64	; 100
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	92 87       	std	Z+10, r25	; 0x0a
 332:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(GCD);
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	69 df       	rcall	.-302    	; 0x210 <TimerSet>
	TimerOn();
 33e:	08 df       	rcall	.-496    	; 0x150 <TimerOn>
 340:	7e 01       	movw	r14, r28
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	e8 0e       	add	r14, r24
 346:	f1 1c       	adc	r15, r1
 348:	de 01       	movw	r26, r28
 34a:	11 96       	adiw	r26, 0x01	; 1
 34c:	6d 01       	movw	r12, r26
 34e:	f6 01       	movw	r30, r12
	
	while(1)
	{
		for(unsigned int i = 0; i < numTasks; i++)
		{
			if(tasks[i]->elapsedTime >= tasks[i]->period)
 350:	01 91       	ld	r16, Z+
 352:	11 91       	ld	r17, Z+
 354:	6f 01       	movw	r12, r30
 356:	d8 01       	movw	r26, r16
 358:	15 96       	adiw	r26, 0x05	; 5
 35a:	4d 91       	ld	r20, X+
 35c:	5d 91       	ld	r21, X+
 35e:	6d 91       	ld	r22, X+
 360:	7c 91       	ld	r23, X
 362:	18 97       	sbiw	r26, 0x08	; 8
 364:	11 96       	adiw	r26, 0x01	; 1
 366:	8d 91       	ld	r24, X+
 368:	9d 91       	ld	r25, X+
 36a:	0d 90       	ld	r0, X+
 36c:	bc 91       	ld	r27, X
 36e:	a0 2d       	mov	r26, r0
 370:	48 17       	cp	r20, r24
 372:	59 07       	cpc	r21, r25
 374:	6a 07       	cpc	r22, r26
 376:	7b 07       	cpc	r23, r27
 378:	80 f0       	brcs	.+32     	; 0x39a <main+0xe0>
 37a:	f8 01       	movw	r30, r16
			{
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 37c:	80 81       	ld	r24, Z
 37e:	01 84       	ldd	r0, Z+9	; 0x09
 380:	f2 85       	ldd	r31, Z+10	; 0x0a
 382:	e0 2d       	mov	r30, r0
 384:	08 2e       	mov	r0, r24
 386:	00 0c       	add	r0, r0
 388:	99 0b       	sbc	r25, r25
 38a:	09 95       	icall
 38c:	d8 01       	movw	r26, r16
 38e:	8c 93       	st	X, r24
 390:	f8 01       	movw	r30, r16
				tasks[i]->elapsedTime = 0;
 392:	15 82       	std	Z+5, r1	; 0x05
 394:	16 82       	std	Z+6, r1	; 0x06
 396:	17 82       	std	Z+7, r1	; 0x07
 398:	10 86       	std	Z+8, r1	; 0x08
 39a:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 1;
 39c:	85 81       	ldd	r24, Z+5	; 0x05
 39e:	96 81       	ldd	r25, Z+6	; 0x06
 3a0:	a7 81       	ldd	r26, Z+7	; 0x07
 3a2:	b0 85       	ldd	r27, Z+8	; 0x08
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	a1 1d       	adc	r26, r1
 3a8:	b1 1d       	adc	r27, r1
 3aa:	85 83       	std	Z+5, r24	; 0x05
 3ac:	96 83       	std	Z+6, r25	; 0x06
 3ae:	a7 83       	std	Z+7, r26	; 0x07
 3b0:	b0 87       	std	Z+8, r27	; 0x08
 3b2:	ce 14       	cp	r12, r14
	TimerSet(GCD);
	TimerOn();
	
	while(1)
	{
		for(unsigned int i = 0; i < numTasks; i++)
 3b4:	df 04       	cpc	r13, r15
 3b6:	59 f6       	brne	.-106    	; 0x34e <main+0x94>
 3b8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 3bc:	88 23       	and	r24, r24
 3be:	e1 f3       	breq	.-8      	; 0x3b8 <main+0xfe>
 3c0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
		TimerFlag = 0;
 3c4:	c1 cf       	rjmp	.-126    	; 0x348 <main+0x8e>

000003c6 <_exit>:
	}
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>


joysticks.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800104  00800104  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd6  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  0000113a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000506  00000000  00000000  00001a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051b  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031b  00000000  00000000  0000257f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ac c0       	rjmp	.+344    	; 0x18e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ec d0       	rcall	.+472    	; 0x29c <main>
  c4:	00 c1       	rjmp	.+512    	; 0x2c6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	46 98       	cbi	0x08, 6	; 8
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	47 9a       	sbi	0x08, 7	; 8
  f4:	00 00       	nop
  f6:	47 98       	cbi	0x08, 7	; 8
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	46 9a       	sbi	0x08, 6	; 8
 136:	8b b9       	out	0x0b, r24	; 11
 138:	47 9a       	sbi	0x08, 7	; 8
 13a:	00 00       	nop
 13c:	47 98       	cbi	0x08, 7	; 8
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <TimerOn>:
 146:	8b e0       	ldi	r24, 0x0B	; 11
 148:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 14c:	8d e7       	ldi	r24, 0x7D	; 125
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 154:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 15e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 162:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 16e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 172:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 176:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 17a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 17e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 182:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 186:	8f b7       	in	r24, 0x3f	; 63
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	8f bf       	out	0x3f, r24	; 63
 18c:	08 95       	ret

0000018e <__vector_13>:
}

//In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
 1a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1a8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 1ac:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	a1 09       	sbc	r26, r1
 1b4:	b1 09       	sbc	r27, r1
 1b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1ba:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1be:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1c2:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if(_avr_timer_cntcurr == 0)
 1c6:	89 2b       	or	r24, r25
 1c8:	8a 2b       	or	r24, r26
 1ca:	8b 2b       	or	r24, r27
 1cc:	99 f4       	brne	.+38     	; 0x1f4 <__vector_13+0x66>
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
	if(_avr_timer_cntcurr == 0)
	{
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1dc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1e0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1e8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1ec:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1f0:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <TimerSet>:

//Set TimerISR() to tick every M ms
void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
 206:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 20a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 20e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 212:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 216:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 21a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 21e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 222:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 226:	08 95       	ret

00000228 <ADC_init>:
#include <avr/io.h>
#include "io.c"
#include "Timer.c"

void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 <<ADSC) | (1<<ADATE);
 228:	ea e7       	ldi	r30, 0x7A	; 122
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	80 6e       	ori	r24, 0xE0	; 224
 230:	80 83       	st	Z, r24
 232:	08 95       	ret

00000234 <writeLCD>:

enum lcd_States{display}lcd_state;
void writeLCD()
{
	unsigned short x;
	switch(lcd_state)
 234:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lcd_state>
 238:	88 23       	and	r24, r24
 23a:	11 f0       	breq	.+4      	; 0x240 <writeLCD+0xc>
	{
		case display:
		lcd_state = display;
		break;
	}
	switch(lcd_state)
 23c:	81 11       	cpse	r24, r1
 23e:	2d c0       	rjmp	.+90     	; 0x29a <writeLCD+0x66>
	{
		case display:
		ADC_init();
 240:	f3 df       	rcall	.-26     	; 0x228 <ADC_init>
		x = ADC;
 242:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 246:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		if((x < 0x0100) && (x >= 0x0000))
 24a:	8f 3f       	cpi	r24, 0xFF	; 255
 24c:	91 05       	cpc	r25, r1
 24e:	09 f0       	breq	.+2      	; 0x252 <writeLCD+0x1e>
 250:	28 f4       	brcc	.+10     	; 0x25c <writeLCD+0x28>
		{
			LCD_Cursor(1);
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	58 df       	rcall	.-336    	; 0x106 <LCD_Cursor>
			LCD_WriteData(1 + '0');
 256:	81 e3       	ldi	r24, 0x31	; 49
 258:	6d cf       	rjmp	.-294    	; 0x134 <LCD_WriteData>
 25a:	08 95       	ret
 25c:	9c 01       	movw	r18, r24
		}
		else if((x < 0x0200) && (x > 0x0100))
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	31 40       	sbci	r19, 0x01	; 1
 262:	2f 3f       	cpi	r18, 0xFF	; 255
 264:	31 05       	cpc	r19, r1
 266:	28 f4       	brcc	.+10     	; 0x272 <writeLCD+0x3e>
		{
			LCD_Cursor(1);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	4d df       	rcall	.-358    	; 0x106 <LCD_Cursor>
			LCD_WriteData(2 + '0');
 26c:	82 e3       	ldi	r24, 0x32	; 50
 26e:	62 cf       	rjmp	.-316    	; 0x134 <LCD_WriteData>
 270:	08 95       	ret
 272:	9c 01       	movw	r18, r24
		}
		else if((x < 0x0300) && (x > 0x0200))
 274:	21 50       	subi	r18, 0x01	; 1
 276:	32 40       	sbci	r19, 0x02	; 2
 278:	2f 3f       	cpi	r18, 0xFF	; 255
 27a:	31 05       	cpc	r19, r1
		{
			LCD_Cursor(1);
 27c:	28 f4       	brcc	.+10     	; 0x288 <writeLCD+0x54>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	42 df       	rcall	.-380    	; 0x106 <LCD_Cursor>
			LCD_WriteData(3 + '0');
 282:	83 e3       	ldi	r24, 0x33	; 51
 284:	57 cf       	rjmp	.-338    	; 0x134 <LCD_WriteData>
 286:	08 95       	ret
		}
		else if((x < 0x0400) && (x > 0x0300))
 288:	81 50       	subi	r24, 0x01	; 1
 28a:	93 40       	sbci	r25, 0x03	; 3
 28c:	8f 3f       	cpi	r24, 0xFF	; 255
 28e:	91 05       	cpc	r25, r1
		{
			LCD_Cursor(1);
 290:	20 f4       	brcc	.+8      	; 0x29a <writeLCD+0x66>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	38 df       	rcall	.-400    	; 0x106 <LCD_Cursor>
			LCD_WriteData(4 + '0');
 296:	84 e3       	ldi	r24, 0x34	; 52
 298:	4d cf       	rjmp	.-358    	; 0x134 <LCD_WriteData>
 29a:	08 95       	ret

0000029c <main>:
 29c:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	}
}
int main(void)
{
	DDRD = 0xFF; PORTD = 0x00;
 29e:	8a b9       	out	0x0a, r24	; 10
 2a0:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
 2a2:	87 b9       	out	0x07, r24	; 7
 2a4:	18 b8       	out	0x08, r1	; 8
	
	unsigned long writeLCD_period = 1000;
	unsigned long writeLCD_elapsedTime = 0;
	const unsigned long timerPeriod = 1;
	
	LCD_init();
 2a6:	37 df       	rcall	.-402    	; 0x116 <LCD_init>
	LCD_ClearScreen();
 2a8:	2b df       	rcall	.-426    	; 0x100 <LCD_ClearScreen>
 2aa:	61 e0       	ldi	r22, 0x01	; 1
	
	TimerSet(timerPeriod);
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	a9 df       	rcall	.-174    	; 0x206 <TimerSet>
	TimerOn();
 2b4:	48 df       	rcall	.-368    	; 0x146 <TimerOn>
 2b6:	be df       	rcall	.-132    	; 0x234 <writeLCD>
	
    while (1) 
    {
		if(writeLCD_period >= writeLCD_elapsedTime)
		{
			writeLCD();
 2b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
			writeLCD_elapsedTime = 0;
		}
		while(!TimerFlag){};
 2bc:	88 23       	and	r24, r24
 2be:	e1 f3       	breq	.-8      	; 0x2b8 <main+0x1c>
 2c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		TimerFlag = 0;
 2c4:	f8 cf       	rjmp	.-16     	; 0x2b6 <main+0x1a>

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
		writeLCD_elapsedTime += timerPeriod;
    }
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>


moh_matrixlab_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000005ee  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800114  00800114  00000696  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c3e  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000996  00000000  00000000  000013ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000590  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000524  00000000  00000000  00002963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002e87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c1       	rjmp	.+744    	; 0x31e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ee       	ldi	r30, 0xEE	; 238
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 33       	cpi	r26, 0x34	; 52
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a8 d1       	rcall	.+848    	; 0x414 <main>
  c4:	92 c2       	rjmp	.+1316   	; 0x5ea <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SM2_Tick>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	20 b1       	in	r18, 0x00	; 0
  ca:	20 95       	com	r18
  cc:	2f 70       	andi	r18, 0x0F	; 15
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	91 05       	cpc	r25, r1
  d2:	d9 f0       	breq	.+54     	; 0x10a <SM2_Tick+0x42>
  d4:	3c f4       	brge	.+14     	; 0xe4 <SM2_Tick+0x1c>
  d6:	00 97       	sbiw	r24, 0x00	; 0
  d8:	09 f4       	brne	.+2      	; 0xdc <SM2_Tick+0x14>
  da:	d3 c0       	rjmp	.+422    	; 0x282 <SM2_Tick+0x1ba>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 05       	cpc	r25, r1
  e0:	41 f0       	breq	.+16     	; 0xf2 <SM2_Tick+0x2a>
  e2:	2a c0       	rjmp	.+84     	; 0x138 <SM2_Tick+0x70>
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	91 05       	cpc	r25, r1
  e8:	d9 f0       	breq	.+54     	; 0x120 <SM2_Tick+0x58>
  ea:	a4 f0       	brlt	.+40     	; 0x114 <SM2_Tick+0x4c>
  ec:	05 97       	sbiw	r24, 0x05	; 5
  ee:	f1 f0       	breq	.+60     	; 0x12c <SM2_Tick+0x64>
  f0:	23 c0       	rjmp	.+70     	; 0x138 <SM2_Tick+0x70>
  f2:	21 30       	cpi	r18, 0x01	; 1
  f4:	59 f1       	breq	.+86     	; 0x14c <SM2_Tick+0x84>
  f6:	22 30       	cpi	r18, 0x02	; 2
  f8:	09 f4       	brne	.+2      	; 0xfc <SM2_Tick+0x34>
  fa:	5a c0       	rjmp	.+180    	; 0x1b0 <SM2_Tick+0xe8>
  fc:	24 30       	cpi	r18, 0x04	; 4
  fe:	09 f4       	brne	.+2      	; 0x102 <SM2_Tick+0x3a>
 100:	89 c0       	rjmp	.+274    	; 0x214 <SM2_Tick+0x14c>
 102:	28 30       	cpi	r18, 0x08	; 8
 104:	09 f0       	breq	.+2      	; 0x108 <SM2_Tick+0x40>
 106:	e6 c0       	rjmp	.+460    	; 0x2d4 <SM2_Tick+0x20c>
 108:	a1 c0       	rjmp	.+322    	; 0x24c <SM2_Tick+0x184>
 10a:	21 30       	cpi	r18, 0x01	; 1
 10c:	f9 f0       	breq	.+62     	; 0x14c <SM2_Tick+0x84>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
 114:	22 30       	cpi	r18, 0x02	; 2
 116:	09 f4       	brne	.+2      	; 0x11a <SM2_Tick+0x52>
 118:	4b c0       	rjmp	.+150    	; 0x1b0 <SM2_Tick+0xe8>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret
 120:	24 30       	cpi	r18, 0x04	; 4
 122:	09 f4       	brne	.+2      	; 0x126 <SM2_Tick+0x5e>
 124:	77 c0       	rjmp	.+238    	; 0x214 <SM2_Tick+0x14c>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	08 95       	ret
 12c:	28 30       	cpi	r18, 0x08	; 8
 12e:	09 f4       	brne	.+2      	; 0x132 <SM2_Tick+0x6a>
 130:	8d c0       	rjmp	.+282    	; 0x24c <SM2_Tick+0x184>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret
 138:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <k+0x1>
 13c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <k>
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <side_location>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
 14c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <k+0x1>
 150:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <k>
 154:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <column_val>
 158:	80 39       	cpi	r24, 0x90	; 144
 15a:	09 f4       	brne	.+2      	; 0x15e <SM2_Tick+0x96>
 15c:	95 c0       	rjmp	.+298    	; 0x288 <SM2_Tick+0x1c0>
 15e:	80 3f       	cpi	r24, 0xF0	; 240
 160:	09 f0       	breq	.+2      	; 0x164 <SM2_Tick+0x9c>
 162:	a4 c0       	rjmp	.+328    	; 0x2ac <SM2_Tick+0x1e4>
 164:	94 c0       	rjmp	.+296    	; 0x28e <SM2_Tick+0x1c6>
 166:	9c 01       	movw	r18, r24
 168:	80 81       	ld	r24, Z
 16a:	80 39       	cpi	r24, 0x90	; 144
 16c:	39 f4       	brne	.+14     	; 0x17c <SM2_Tick+0xb4>
 16e:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <k>
 172:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <k+0x1>
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	08 95       	ret
 17c:	80 3f       	cpi	r24, 0xF0	; 240
 17e:	39 f4       	brne	.+14     	; 0x18e <SM2_Tick+0xc6>
 180:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <k>
 184:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <k+0x1>
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret
 18e:	88 0f       	add	r24, r24
 190:	80 83       	st	Z, r24
 192:	31 96       	adiw	r30, 0x01	; 1
 194:	c9 01       	movw	r24, r18
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	52 2f       	mov	r21, r18
 19a:	43 2f       	mov	r20, r19
 19c:	89 30       	cpi	r24, 0x09	; 9
 19e:	91 05       	cpc	r25, r1
 1a0:	11 f7       	brne	.-60     	; 0x166 <SM2_Tick+0x9e>
 1a2:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <k+0x1>
 1a6:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <k>
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	08 95       	ret
 1b0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <k+0x1>
 1b4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <k>
 1b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <column_val>
 1bc:	89 30       	cpi	r24, 0x09	; 9
 1be:	09 f4       	brne	.+2      	; 0x1c2 <SM2_Tick+0xfa>
 1c0:	69 c0       	rjmp	.+210    	; 0x294 <SM2_Tick+0x1cc>
 1c2:	8f 30       	cpi	r24, 0x0F	; 15
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <SM2_Tick+0x100>
 1c6:	7c c0       	rjmp	.+248    	; 0x2c0 <SM2_Tick+0x1f8>
 1c8:	68 c0       	rjmp	.+208    	; 0x29a <SM2_Tick+0x1d2>
 1ca:	9c 01       	movw	r18, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	89 30       	cpi	r24, 0x09	; 9
 1d0:	39 f4       	brne	.+14     	; 0x1e0 <SM2_Tick+0x118>
 1d2:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <k>
 1d6:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <k+0x1>
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	08 95       	ret
 1e0:	8f 30       	cpi	r24, 0x0F	; 15
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <SM2_Tick+0x12a>
 1e4:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <k>
 1e8:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <k+0x1>
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	08 95       	ret
 1f2:	86 95       	lsr	r24
 1f4:	80 83       	st	Z, r24
 1f6:	31 96       	adiw	r30, 0x01	; 1
 1f8:	c9 01       	movw	r24, r18
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	52 2f       	mov	r21, r18
 1fe:	43 2f       	mov	r20, r19
 200:	89 30       	cpi	r24, 0x09	; 9
 202:	91 05       	cpc	r25, r1
 204:	11 f7       	brne	.-60     	; 0x1ca <SM2_Tick+0x102>
 206:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <k+0x1>
 20a:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <k>
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	08 95       	ret
 214:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <side_location>
 218:	99 23       	and	r25, r25
 21a:	09 f4       	brne	.+2      	; 0x21e <SM2_Tick+0x156>
 21c:	41 c0       	rjmp	.+130    	; 0x2a0 <SM2_Tick+0x1d8>
 21e:	e0 e0       	ldi	r30, 0x00	; 0
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	28 e0       	ldi	r18, 0x08	; 8
 224:	31 e0       	ldi	r19, 0x01	; 1
 226:	80 81       	ld	r24, Z
 228:	88 0f       	add	r24, r24
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	81 93       	st	Z+, r24
 22e:	2e 17       	cp	r18, r30
 230:	3f 07       	cpc	r19, r31
 232:	c9 f7       	brne	.-14     	; 0x226 <SM2_Tick+0x15e>
 234:	28 e0       	ldi	r18, 0x08	; 8
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <k+0x1>
 23c:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <k>
 240:	91 50       	subi	r25, 0x01	; 1
 242:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <side_location>
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	08 95       	ret
 24c:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <side_location>
 250:	94 30       	cpi	r25, 0x04	; 4
 252:	48 f5       	brcc	.+82     	; 0x2a6 <SM2_Tick+0x1de>
 254:	e0 e0       	ldi	r30, 0x00	; 0
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	28 e0       	ldi	r18, 0x08	; 8
 25a:	31 e0       	ldi	r19, 0x01	; 1
 25c:	80 81       	ld	r24, Z
 25e:	86 95       	lsr	r24
 260:	80 68       	ori	r24, 0x80	; 128
 262:	81 93       	st	Z+, r24
 264:	e2 17       	cp	r30, r18
 266:	f3 07       	cpc	r31, r19
 268:	c9 f7       	brne	.-14     	; 0x25c <SM2_Tick+0x194>
 26a:	28 e0       	ldi	r18, 0x08	; 8
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <k+0x1>
 272:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <k>
 276:	9f 5f       	subi	r25, 0xFF	; 255
 278:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <side_location>
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	08 95       	ret
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	08 95       	ret
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	08 95       	ret
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	08 95       	ret
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	08 95       	ret
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	08 95       	ret
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	08 95       	ret
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	08 95       	ret
 2ac:	88 0f       	add	r24, r24
 2ae:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <column_val>
 2b2:	e9 e0       	ldi	r30, 0x09	; 9
 2b4:	f1 e0       	ldi	r31, 0x01	; 1
 2b6:	22 e0       	ldi	r18, 0x02	; 2
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	51 e0       	ldi	r21, 0x01	; 1
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	54 cf       	rjmp	.-344    	; 0x168 <SM2_Tick+0xa0>
 2c0:	86 95       	lsr	r24
 2c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <column_val>
 2c6:	e9 e0       	ldi	r30, 0x09	; 9
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	22 e0       	ldi	r18, 0x02	; 2
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	51 e0       	ldi	r21, 0x01	; 1
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	7c cf       	rjmp	.-264    	; 0x1cc <SM2_Tick+0x104>
 2d4:	08 95       	ret

000002d6 <TimerOn>:
 2d6:	8b e0       	ldi	r24, 0x0B	; 11
 2d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2dc:	8d e7       	ldi	r24, 0x7D	; 125
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2f6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 2fa:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 2fe:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 302:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 306:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 30a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 30e:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 312:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
 316:	8f b7       	in	r24, 0x3f	; 63
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	8f bf       	out	0x3f, r24	; 63
 31c:	08 95       	ret

0000031e <__vector_13>:
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_avr_timer_cntcurr>
 334:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <_avr_timer_cntcurr+0x1>
 338:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <_avr_timer_cntcurr+0x2>
 33c:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <_avr_timer_cntcurr+0x3>
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	a1 09       	sbc	r26, r1
 344:	b1 09       	sbc	r27, r1
 346:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 34a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 34e:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 352:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
 356:	89 2b       	or	r24, r25
 358:	8a 2b       	or	r24, r26
 35a:	8b 2b       	or	r24, r27
 35c:	99 f4       	brne	.+38     	; 0x384 <__vector_13+0x66>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <TimerFlag>
 364:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 368:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 36c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 370:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 374:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 378:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 37c:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 380:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <TimerSet>:
 396:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_M>
 39a:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_M+0x1>
 39e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_M+0x2>
 3a2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_M+0x3>
 3a6:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <_avr_timer_cntcurr>
 3aa:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <_avr_timer_cntcurr+0x1>
 3ae:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_avr_timer_cntcurr+0x2>
 3b2:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_avr_timer_cntcurr+0x3>
 3b6:	08 95       	ret

000003b8 <transmit_data>:

//==========shift register function===========
void transmit_data(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTB = 0x08;
 3bc:	58 e0       	ldi	r21, 0x08	; 8
		PORTB |= ((data >> i) & 0x01);
 3be:	e8 2f       	mov	r30, r24
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
void transmit_data(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
	{
		PORTB = 0x08;
 3c2:	55 b9       	out	0x05, r21	; 5
		PORTB |= ((data >> i) & 0x01);
 3c4:	45 b1       	in	r20, 0x05	; 5
 3c6:	bf 01       	movw	r22, r30
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <transmit_data+0x18>
 3cc:	75 95       	asr	r23
 3ce:	67 95       	ror	r22
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <transmit_data+0x14>
 3d4:	96 2f       	mov	r25, r22
 3d6:	91 70       	andi	r25, 0x01	; 1
 3d8:	94 2b       	or	r25, r20
 3da:	95 b9       	out	0x05, r25	; 5
		PORTB |= 0x02;
 3dc:	29 9a       	sbi	0x05, 1	; 5

//==========shift register function===========
void transmit_data(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
 3de:	2f 5f       	subi	r18, 0xFF	; 255
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
 3e2:	28 30       	cpi	r18, 0x08	; 8
 3e4:	31 05       	cpc	r19, r1
 3e6:	69 f7       	brne	.-38     	; 0x3c2 <transmit_data+0xa>
	{
		PORTB = 0x08;
		PORTB |= ((data >> i) & 0x01);
		PORTB |= 0x02;
	}
	PORTB |= 0x04;
 3e8:	2a 9a       	sbi	0x05, 2	; 5
	PORTB = 0x00;
 3ea:	15 b8       	out	0x05, r1	; 5
 3ec:	08 95       	ret

000003ee <SM1_Tick>:
		break;
	}
	//===============actions================
	switch(state){
		case sm1_display:
		transmit_data(column_sel[j]);
 3ee:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <j>
 3f2:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <j+0x1>
 3f6:	e0 50       	subi	r30, 0x00	; 0
 3f8:	ff 4f       	sbci	r31, 0xFF	; 255
 3fa:	80 81       	ld	r24, Z
 3fc:	dd df       	rcall	.-70     	; 0x3b8 <transmit_data>
		PORTC = column_val[j];
 3fe:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <j>
 402:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <j+0x1>
 406:	e8 5f       	subi	r30, 0xF8	; 248
 408:	fe 4f       	sbci	r31, 0xFE	; 254
 40a:	80 81       	ld	r24, Z
 40c:	88 b9       	out	0x08, r24	; 8
		
		default:
		break;
	}
	return state;
}
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	08 95       	ret

00000414 <main>:
		break;
	}return state;
}

int main(void)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	00 d0       	rcall	.+0      	; 0x41a <main+0x6>
 41a:	00 d0       	rcall	.+0      	; 0x41c <main+0x8>
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 420:	11 b8       	out	0x01, r1	; 1
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 426:	84 b9       	out	0x04, r24	; 4
 428:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 42a:	87 b9       	out	0x07, r24	; 7
 42c:	18 b8       	out	0x08, r1	; 8
 42e:	0f 2e       	mov	r0, r31
 430:	f4 e6       	ldi	r31, 0x64	; 100
 432:	ef 2e       	mov	r14, r31
 434:	f0 2d       	mov	r31, r0
 436:	f1 2c       	mov	r15, r1
 438:	00 e0       	ldi	r16, 0x00	; 0
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	52 e0       	ldi	r21, 0x02	; 2
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	04 c0       	rjmp	.+8      	; 0x44e <main+0x3a>
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 446:	e6 2e       	mov	r14, r22
 448:	f7 2e       	mov	r15, r23
 44a:	08 2f       	mov	r16, r24
 44c:	19 2f       	mov	r17, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 44e:	65 2f       	mov	r22, r21
 450:	74 2f       	mov	r23, r20
 452:	83 2f       	mov	r24, r19
 454:	92 2f       	mov	r25, r18
 456:	2e 2d       	mov	r18, r14
 458:	3f 2d       	mov	r19, r15
 45a:	40 2f       	mov	r20, r16
 45c:	51 2f       	mov	r21, r17
 45e:	a3 d0       	rcall	.+326    	; 0x5a6 <__udivmodsi4>
 460:	5e 2d       	mov	r21, r14
 462:	4f 2d       	mov	r20, r15
 464:	30 2f       	mov	r19, r16
 466:	21 2f       	mov	r18, r17
		if( c == 0 ) { return b; }
 468:	61 15       	cp	r22, r1
 46a:	71 05       	cpc	r23, r1
 46c:	81 05       	cpc	r24, r1
 46e:	91 05       	cpc	r25, r1
 470:	51 f7       	brne	.-44     	; 0x446 <main+0x32>
	
	unsigned long int SM1_Tick_calc = 2;
	unsigned long int SM2_Tick_calc = 100;
	
	unsigned long int GCD = findGCD(SM1_Tick_calc, SM2_Tick_calc);
	unsigned long int SM1_Tick1_period = SM1_Tick_calc/GCD;
 472:	62 e0       	ldi	r22, 0x02	; 2
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	2e 2d       	mov	r18, r14
 47c:	3f 2d       	mov	r19, r15
 47e:	40 2f       	mov	r20, r16
 480:	51 2f       	mov	r21, r17
 482:	91 d0       	rcall	.+290    	; 0x5a6 <__udivmodsi4>
 484:	49 01       	movw	r8, r18
 486:	5a 01       	movw	r10, r20
	unsigned long int SM2_Tick2_period = SM2_Tick_calc/GCD;
 488:	64 e6       	ldi	r22, 0x64	; 100
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	2e 2d       	mov	r18, r14
 492:	3f 2d       	mov	r19, r15
 494:	40 2f       	mov	r20, r16
 496:	51 2f       	mov	r21, r17
 498:	86 d0       	rcall	.+268    	; 0x5a6 <__udivmodsi4>
	
	static task task1, task2;
	task *tasks[] = {&task1, &task2};
 49a:	af e1       	ldi	r26, 0x1F	; 31
 49c:	b1 e0       	ldi	r27, 0x01	; 1
 49e:	ba 83       	std	Y+2, r27	; 0x02
 4a0:	a9 83       	std	Y+1, r26	; 0x01
 4a2:	e4 e1       	ldi	r30, 0x14	; 20
 4a4:	f1 e0       	ldi	r31, 0x01	; 1
 4a6:	fc 83       	std	Y+4, r31	; 0x04
 4a8:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	task1.state = -1;
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	8c 93       	st	X, r24
	task1.period = SM1_Tick1_period;
 4ae:	11 96       	adiw	r26, 0x01	; 1
 4b0:	8d 92       	st	X+, r8
 4b2:	9d 92       	st	X+, r9
 4b4:	ad 92       	st	X+, r10
 4b6:	bc 92       	st	X, r11
 4b8:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = SM1_Tick1_period;
 4ba:	15 96       	adiw	r26, 0x05	; 5
 4bc:	8d 92       	st	X+, r8
 4be:	9d 92       	st	X+, r9
 4c0:	ad 92       	st	X+, r10
 4c2:	bc 92       	st	X, r11
 4c4:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &SM1_Tick;
 4c6:	67 ef       	ldi	r22, 0xF7	; 247
 4c8:	71 e0       	ldi	r23, 0x01	; 1
 4ca:	1a 96       	adiw	r26, 0x0a	; 10
 4cc:	7c 93       	st	X, r23
 4ce:	6e 93       	st	-X, r22
 4d0:	19 97       	sbiw	r26, 0x09	; 9
	
	task2.state = -1;
 4d2:	80 83       	st	Z, r24
	task2.period = SM2_Tick2_period;
 4d4:	21 83       	std	Z+1, r18	; 0x01
 4d6:	32 83       	std	Z+2, r19	; 0x02
 4d8:	43 83       	std	Z+3, r20	; 0x03
 4da:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = SM2_Tick2_period;
 4dc:	25 83       	std	Z+5, r18	; 0x05
 4de:	36 83       	std	Z+6, r19	; 0x06
 4e0:	47 83       	std	Z+7, r20	; 0x07
 4e2:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &SM2_Tick;
 4e4:	84 e6       	ldi	r24, 0x64	; 100
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	92 87       	std	Z+10, r25	; 0x0a
 4ea:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(GCD);
 4ec:	6e 2d       	mov	r22, r14
 4ee:	7f 2d       	mov	r23, r15
 4f0:	80 2f       	mov	r24, r16
 4f2:	91 2f       	mov	r25, r17
	TimerOn();
 4f4:	50 df       	rcall	.-352    	; 0x396 <TimerSet>
 4f6:	ef de       	rcall	.-546    	; 0x2d6 <TimerOn>
 4f8:	7e 01       	movw	r14, r28
 4fa:	85 e0       	ldi	r24, 0x05	; 5
 4fc:	e8 0e       	add	r14, r24
 4fe:	f1 1c       	adc	r15, r1
	
	while(1)
	{
		if(j == 7)
 500:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <j>
 504:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <j+0x1>
 508:	07 97       	sbiw	r24, 0x07	; 7
 50a:	29 f4       	brne	.+10     	; 0x516 <main+0x102>
		j = 0;
 50c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <j+0x1>
 510:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <j>
 514:	41 c0       	rjmp	.+130    	; 0x598 <main+0x184>
 516:	de 01       	movw	r26, r28
 518:	11 96       	adiw	r26, 0x01	; 1
 51a:	6d 01       	movw	r12, r26
		else
		{
			for(unsigned int i = 0; i < numTasks; i++)
			{
				if(tasks[i]->elapsedTime == tasks[i]->period)
 51c:	f6 01       	movw	r30, r12
 51e:	01 91       	ld	r16, Z+
 520:	11 91       	ld	r17, Z+
 522:	6f 01       	movw	r12, r30
 524:	d8 01       	movw	r26, r16
 526:	15 96       	adiw	r26, 0x05	; 5
 528:	4d 91       	ld	r20, X+
 52a:	5d 91       	ld	r21, X+
 52c:	6d 91       	ld	r22, X+
 52e:	7c 91       	ld	r23, X
 530:	18 97       	sbiw	r26, 0x08	; 8
 532:	11 96       	adiw	r26, 0x01	; 1
 534:	8d 91       	ld	r24, X+
 536:	9d 91       	ld	r25, X+
 538:	0d 90       	ld	r0, X+
 53a:	bc 91       	ld	r27, X
 53c:	a0 2d       	mov	r26, r0
 53e:	48 17       	cp	r20, r24
 540:	59 07       	cpc	r21, r25
 542:	6a 07       	cpc	r22, r26
 544:	7b 07       	cpc	r23, r27
 546:	81 f4       	brne	.+32     	; 0x568 <main+0x154>
				{
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 548:	f8 01       	movw	r30, r16
 54a:	80 81       	ld	r24, Z
 54c:	01 84       	ldd	r0, Z+9	; 0x09
 54e:	f2 85       	ldd	r31, Z+10	; 0x0a
 550:	e0 2d       	mov	r30, r0
 552:	08 2e       	mov	r0, r24
 554:	00 0c       	add	r0, r0
 556:	99 0b       	sbc	r25, r25
 558:	09 95       	icall
 55a:	d8 01       	movw	r26, r16
 55c:	8c 93       	st	X, r24
					tasks[i]->elapsedTime = 0;
 55e:	f8 01       	movw	r30, r16
 560:	15 82       	std	Z+5, r1	; 0x05
 562:	16 82       	std	Z+6, r1	; 0x06
 564:	17 82       	std	Z+7, r1	; 0x07
 566:	10 86       	std	Z+8, r1	; 0x08
				}
				tasks[i]->elapsedTime += 1;
 568:	f8 01       	movw	r30, r16
 56a:	85 81       	ldd	r24, Z+5	; 0x05
 56c:	96 81       	ldd	r25, Z+6	; 0x06
 56e:	a7 81       	ldd	r26, Z+7	; 0x07
 570:	b0 85       	ldd	r27, Z+8	; 0x08
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	a1 1d       	adc	r26, r1
 576:	b1 1d       	adc	r27, r1
 578:	85 83       	std	Z+5, r24	; 0x05
 57a:	96 83       	std	Z+6, r25	; 0x06
 57c:	a7 83       	std	Z+7, r26	; 0x07
 57e:	b0 87       	std	Z+8, r27	; 0x08
	{
		if(j == 7)
		j = 0;
		else
		{
			for(unsigned int i = 0; i < numTasks; i++)
 580:	ce 14       	cp	r12, r14
 582:	df 04       	cpc	r13, r15
 584:	59 f6       	brne	.-106    	; 0x51c <main+0x108>
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
					tasks[i]->elapsedTime = 0;
				}
				tasks[i]->elapsedTime += 1;
			}
			j++;
 586:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <j>
 58a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <j+0x1>
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <j+0x1>
 594:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <j>
		}
		while(!TimerFlag);
 598:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <TimerFlag>
 59c:	88 23       	and	r24, r24
 59e:	e1 f3       	breq	.-8      	; 0x598 <main+0x184>
		TimerFlag = 0;
 5a0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <TimerFlag>
	}
 5a4:	ad cf       	rjmp	.-166    	; 0x500 <main+0xec>

000005a6 <__udivmodsi4>:
 5a6:	a1 e2       	ldi	r26, 0x21	; 33
 5a8:	1a 2e       	mov	r1, r26
 5aa:	aa 1b       	sub	r26, r26
 5ac:	bb 1b       	sub	r27, r27
 5ae:	fd 01       	movw	r30, r26
 5b0:	0d c0       	rjmp	.+26     	; 0x5cc <__udivmodsi4_ep>

000005b2 <__udivmodsi4_loop>:
 5b2:	aa 1f       	adc	r26, r26
 5b4:	bb 1f       	adc	r27, r27
 5b6:	ee 1f       	adc	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	a2 17       	cp	r26, r18
 5bc:	b3 07       	cpc	r27, r19
 5be:	e4 07       	cpc	r30, r20
 5c0:	f5 07       	cpc	r31, r21
 5c2:	20 f0       	brcs	.+8      	; 0x5cc <__udivmodsi4_ep>
 5c4:	a2 1b       	sub	r26, r18
 5c6:	b3 0b       	sbc	r27, r19
 5c8:	e4 0b       	sbc	r30, r20
 5ca:	f5 0b       	sbc	r31, r21

000005cc <__udivmodsi4_ep>:
 5cc:	66 1f       	adc	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	1a 94       	dec	r1
 5d6:	69 f7       	brne	.-38     	; 0x5b2 <__udivmodsi4_loop>
 5d8:	60 95       	com	r22
 5da:	70 95       	com	r23
 5dc:	80 95       	com	r24
 5de:	90 95       	com	r25
 5e0:	9b 01       	movw	r18, r22
 5e2:	ac 01       	movw	r20, r24
 5e4:	bd 01       	movw	r22, r26
 5e6:	cf 01       	movw	r24, r30
 5e8:	08 95       	ret

000005ea <_exit>:
 5ea:	f8 94       	cli

000005ec <__stop_program>:
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <__stop_program>


moh_shiftreglabpart1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000031e  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800106  00800106  000003b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b0d  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000455  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fe  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000346  00000000  00000000  0000232a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e0 d0       	rcall	.+448    	; 0x284 <main>
  c4:	2a c1       	rjmp	.+596    	; 0x31a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
  ec:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
  f0:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
  f4:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
  f8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
  fc:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 100:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 104:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

//In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
 122:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 126:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 13c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 140:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 144:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0)
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <TimerFlag>
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
	if(_avr_timer_cntcurr == 0)
	{
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 15a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 15e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 162:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 166:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 16a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 172:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

//Set TimerISR() to tick every M ms
void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
 188:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 18c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 190:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 194:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <_avr_timer_cntcurr>
 19c:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <transmit_data>:
unsigned char val = 0x0F;

void transmit_data(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTB = 0x08;
 1ae:	58 e0       	ldi	r21, 0x08	; 8
		PORTB |= ((data >> i) & 0x01);
 1b0:	e8 2f       	mov	r30, r24
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
void transmit_data(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
	{
		PORTB = 0x08;
 1b4:	55 b9       	out	0x05, r21	; 5
		PORTB |= ((data >> i) & 0x01);
 1b6:	45 b1       	in	r20, 0x05	; 5
 1b8:	bf 01       	movw	r22, r30
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <transmit_data+0x18>
 1be:	75 95       	asr	r23
 1c0:	67 95       	ror	r22
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <transmit_data+0x14>
 1c6:	96 2f       	mov	r25, r22
 1c8:	91 70       	andi	r25, 0x01	; 1
 1ca:	94 2b       	or	r25, r20
 1cc:	95 b9       	out	0x05, r25	; 5
		PORTB |= 0x02;
 1ce:	29 9a       	sbi	0x05, 1	; 5
unsigned char val = 0x0F;

void transmit_data(unsigned char data)
{
	int i;
	for(i = 0; i < 8; ++i)
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	3f 4f       	sbci	r19, 0xFF	; 255
 1d4:	28 30       	cpi	r18, 0x08	; 8
 1d6:	31 05       	cpc	r19, r1
 1d8:	69 f7       	brne	.-38     	; 0x1b4 <transmit_data+0xa>
	{
		PORTB = 0x08;
		PORTB |= ((data >> i) & 0x01);
		PORTB |= 0x02;
	}
	PORTB |= 0x04;
 1da:	2a 9a       	sbi	0x05, 2	; 5
	PORTB = 0x00;
 1dc:	15 b8       	out	0x05, r1	; 5
 1de:	08 95       	ret

000001e0 <SM1_Tick>:
}
enum SM1_States{sm1_init, sm1_wait, sm1_inc, sm1_dec};
	
int SM1_Tick(int state)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
	unsigned char button = ~PINA & 0x03;
 1e6:	80 b1       	in	r24, 0x00	; 0
 1e8:	80 95       	com	r24
 1ea:	83 70       	andi	r24, 0x03	; 3
	switch(state)
 1ec:	c1 30       	cpi	r28, 0x01	; 1
 1ee:	d1 05       	cpc	r29, r1
 1f0:	59 f0       	breq	.+22     	; 0x208 <SM1_Tick+0x28>
 1f2:	1c f4       	brge	.+6      	; 0x1fa <SM1_Tick+0x1a>
 1f4:	20 97       	sbiw	r28, 0x00	; 0
 1f6:	b9 f1       	breq	.+110    	; 0x266 <SM1_Tick+0x86>
 1f8:	16 c0       	rjmp	.+44     	; 0x226 <SM1_Tick+0x46>
 1fa:	c2 30       	cpi	r28, 0x02	; 2
 1fc:	d1 05       	cpc	r29, r1
 1fe:	49 f0       	breq	.+18     	; 0x212 <SM1_Tick+0x32>
 200:	c3 30       	cpi	r28, 0x03	; 3
 202:	d1 05       	cpc	r29, r1
 204:	59 f0       	breq	.+22     	; 0x21c <SM1_Tick+0x3c>
 206:	0f c0       	rjmp	.+30     	; 0x226 <SM1_Tick+0x46>
		case sm1_init:
		state = sm1_wait;
		break;
		
		case sm1_wait:
		if(button == inc)
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	c1 f0       	breq	.+48     	; 0x23c <SM1_Tick+0x5c>
		{
			state = sm1_inc;
		}
		else if(button == dec)
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	99 f5       	brne	.+102    	; 0x276 <SM1_Tick+0x96>
 210:	20 c0       	rjmp	.+64     	; 0x252 <SM1_Tick+0x72>
			state = sm1_wait;
		}
		break;
		
		case sm1_inc:
		if(button == inc)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	99 f0       	breq	.+38     	; 0x23c <SM1_Tick+0x5c>
 216:	c1 e0       	ldi	r28, 0x01	; 1
 218:	d0 e0       	ldi	r29, 0x00	; 0
 21a:	2d c0       	rjmp	.+90     	; 0x276 <SM1_Tick+0x96>
			state = sm1_wait;
		}
		break;
		
		case sm1_dec:
		if(button == dec)
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	c9 f0       	breq	.+50     	; 0x252 <SM1_Tick+0x72>
 220:	c1 e0       	ldi	r28, 0x01	; 1
 222:	d0 e0       	ldi	r29, 0x00	; 0
 224:	28 c0       	rjmp	.+80     	; 0x276 <SM1_Tick+0x96>
		break;
		
		default:
		break;
	}
	switch(state)
 226:	c2 30       	cpi	r28, 0x02	; 2
 228:	d1 05       	cpc	r29, r1
 22a:	41 f0       	breq	.+16     	; 0x23c <SM1_Tick+0x5c>
 22c:	c3 30       	cpi	r28, 0x03	; 3
 22e:	d1 05       	cpc	r29, r1
 230:	81 f0       	breq	.+32     	; 0x252 <SM1_Tick+0x72>
 232:	20 97       	sbiw	r28, 0x00	; 0
 234:	01 f5       	brne	.+64     	; 0x276 <SM1_Tick+0x96>
	{
		case sm1_init:
		val = 0x00;
 236:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		break;
 23a:	1d c0       	rjmp	.+58     	; 0x276 <SM1_Tick+0x96>
		
		case sm1_wait:
		break;
		
		case sm1_inc:
		if(val == 0xFF)
 23c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 240:	8f 3f       	cpi	r24, 0xFF	; 255
 242:	a1 f0       	breq	.+40     	; 0x26c <SM1_Tick+0x8c>
		{
			break;
		}
		else
		{
			val = (val << 1) | 0x01;
 244:	88 0f       	add	r24, r24
 246:	81 60       	ori	r24, 0x01	; 1
 248:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		break;
 24c:	c2 e0       	ldi	r28, 0x02	; 2
 24e:	d0 e0       	ldi	r29, 0x00	; 0
 250:	12 c0       	rjmp	.+36     	; 0x276 <SM1_Tick+0x96>
		
		case sm1_dec:
		if(val == 0x00)
 252:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 256:	88 23       	and	r24, r24
 258:	61 f0       	breq	.+24     	; 0x272 <SM1_Tick+0x92>
			break;
		}
		
		else
		{
			val = (val >> 1) | 0x00;
 25a:	86 95       	lsr	r24
 25c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		break;
 260:	c3 e0       	ldi	r28, 0x03	; 3
 262:	d0 e0       	ldi	r29, 0x00	; 0
 264:	08 c0       	rjmp	.+16     	; 0x276 <SM1_Tick+0x96>
enum SM1_States{sm1_init, sm1_wait, sm1_inc, sm1_dec};
	
int SM1_Tick(int state)
{
	unsigned char button = ~PINA & 0x03;
	switch(state)
 266:	c1 e0       	ldi	r28, 0x01	; 1
 268:	d0 e0       	ldi	r29, 0x00	; 0
 26a:	05 c0       	rjmp	.+10     	; 0x276 <SM1_Tick+0x96>
 26c:	c2 e0       	ldi	r28, 0x02	; 2
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <SM1_Tick+0x96>
 272:	c3 e0       	ldi	r28, 0x03	; 3
 274:	d0 e0       	ldi	r29, 0x00	; 0
		break;
		
		default:
		break;
	}
	transmit_data(val);
 276:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 27a:	97 df       	rcall	.-210    	; 0x1aa <transmit_data>
	return state;
}
 27c:	ce 01       	movw	r24, r28
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <main>:
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 284:	11 b8       	out	0x01, r1	; 1
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 28a:	84 b9       	out	0x04, r24	; 4
 28c:	15 b8       	out	0x05, r1	; 5
	
	static task task1;
	task *tasks[] = {&task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	task1.state = 0;
 28e:	e6 e0       	ldi	r30, 0x06	; 6
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	10 82       	st	Z, r1
	task1.period = SM1_Tick_period;
 294:	8a e0       	ldi	r24, 0x0A	; 10
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	a0 e0       	ldi	r26, 0x00	; 0
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	81 83       	std	Z+1, r24	; 0x01
 29e:	92 83       	std	Z+2, r25	; 0x02
 2a0:	a3 83       	std	Z+3, r26	; 0x03
 2a2:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SM1_Tick_period;
 2a4:	85 83       	std	Z+5, r24	; 0x05
 2a6:	96 83       	std	Z+6, r25	; 0x06
 2a8:	a7 83       	std	Z+7, r26	; 0x07
 2aa:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SM1_Tick;
 2ac:	80 ef       	ldi	r24, 0xF0	; 240
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	92 87       	std	Z+10, r25	; 0x0a
 2b2:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(SM1_Tick_period);
 2b4:	6a e0       	ldi	r22, 0x0A	; 10
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	65 df       	rcall	.-310    	; 0x188 <TimerSet>
	TimerOn();
 2be:	04 df       	rcall	.-504    	; 0xc8 <TimerOn>
 2c0:	c6 e0       	ldi	r28, 0x06	; 6
	
	while (1) 
    {
		for(unsigned int i = 0; i < numTasks; i++)
		{
			if(tasks[i]->elapsedTime == tasks[i]->period)
 2c2:	d1 e0       	ldi	r29, 0x01	; 1
 2c4:	4d 81       	ldd	r20, Y+5	; 0x05
 2c6:	5e 81       	ldd	r21, Y+6	; 0x06
 2c8:	6f 81       	ldd	r22, Y+7	; 0x07
 2ca:	78 85       	ldd	r23, Y+8	; 0x08
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	9a 81       	ldd	r25, Y+2	; 0x02
 2d0:	ab 81       	ldd	r26, Y+3	; 0x03
 2d2:	bc 81       	ldd	r27, Y+4	; 0x04
 2d4:	48 17       	cp	r20, r24
 2d6:	59 07       	cpc	r21, r25
 2d8:	6a 07       	cpc	r22, r26
 2da:	7b 07       	cpc	r23, r27
 2dc:	61 f4       	brne	.+24     	; 0x2f6 <main+0x72>
 2de:	88 81       	ld	r24, Y
			{
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 2e0:	e9 85       	ldd	r30, Y+9	; 0x09
 2e2:	fa 85       	ldd	r31, Y+10	; 0x0a
 2e4:	08 2e       	mov	r0, r24
 2e6:	00 0c       	add	r0, r0
 2e8:	99 0b       	sbc	r25, r25
 2ea:	09 95       	icall
 2ec:	88 83       	st	Y, r24
 2ee:	1d 82       	std	Y+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 2f0:	1e 82       	std	Y+6, r1	; 0x06
 2f2:	1f 82       	std	Y+7, r1	; 0x07
 2f4:	18 86       	std	Y+8, r1	; 0x08
 2f6:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 2f8:	9e 81       	ldd	r25, Y+6	; 0x06
 2fa:	af 81       	ldd	r26, Y+7	; 0x07
 2fc:	b8 85       	ldd	r27, Y+8	; 0x08
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	a1 1d       	adc	r26, r1
 302:	b1 1d       	adc	r27, r1
 304:	8d 83       	std	Y+5, r24	; 0x05
 306:	9e 83       	std	Y+6, r25	; 0x06
 308:	af 83       	std	Y+7, r26	; 0x07
 30a:	b8 87       	std	Y+8, r27	; 0x08
 30c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFlag>
		}
		while(!TimerFlag);
 310:	88 23       	and	r24, r24
 312:	e1 f3       	breq	.-8      	; 0x30c <main+0x88>
 314:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <TimerFlag>
		TimerFlag = 0;
 318:	d5 cf       	rjmp	.-86     	; 0x2c4 <main+0x40>

0000031a <_exit>:
	}
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
